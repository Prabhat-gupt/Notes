import { HttpError } from 'http-errors';
import { Config, Package } from '@verdaccio/types';
import { $NextFunctionVer, $RequestExtend, $ResponseExtend, IAuth } from '../types';
export declare function match(regexp: RegExp): any;
export declare function serveFavicon(config: Config): (req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer) => void;
export declare function setSecurityWebHeaders(req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer): void;
export declare function validateName(req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer, value: string, name: string): void;
export declare function validatePackage(req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer, value: string, name: string): void;
export declare function media(expect: string | null): any;
export declare function encodeScopePackage(req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer): void;
export declare function expectJson(req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer): void;
export declare function antiLoop(config: Config): Function;
export declare function handleError(err: HttpError, req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer): any;
export declare function allow(auth: IAuth): Function;
export interface MiddlewareError {
    error: string;
}
export declare type FinalBody = Package | MiddlewareError | string;
export declare function final(body: FinalBody, req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer): void;
export declare const LOG_STATUS_MESSAGE = "@{status}, user: @{user}(@{remoteIP}), req: '@{request.method} @{request.url}'";
export declare const LOG_VERDACCIO_ERROR: string;
export declare const LOG_VERDACCIO_BYTES: string;
export declare function log(config: Config): (req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer) => void;
export declare function errorReportingMiddleware(req: $RequestExtend, res: $ResponseExtend, next: $NextFunctionVer): void;
