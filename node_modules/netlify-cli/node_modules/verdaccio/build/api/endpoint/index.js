"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _express = _interopRequireDefault(require("express"));
var _distTags = _interopRequireDefault(require("./api/dist-tags"));
var _package = _interopRequireDefault(require("./api/package"));
var _ping = _interopRequireDefault(require("./api/ping"));
var _publish = _interopRequireDefault(require("./api/publish"));
var _search = _interopRequireDefault(require("./api/search"));
var _stars = _interopRequireDefault(require("./api/stars"));
var _user = _interopRequireDefault(require("./api/user"));
var _v = _interopRequireDefault(require("./api/v1"));
var _search2 = _interopRequireDefault(require("./api/v1/search"));
var _whoami = _interopRequireDefault(require("./api/whoami"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  match,
  validateName,
  validatePackage,
  encodeScopePackage,
  antiLoop
} = require('../middleware');
function _default(config, auth, storage) {
  /* eslint new-cap:off */
  const app = _express.default.Router();
  /* eslint new-cap:off */
  // validate all of these params as a package name
  // this might be too harsh, so ask if it causes trouble
  app.param('package', validatePackage);
  app.param('filename', validateName);
  app.param('tag', validateName);
  app.param('version', validateName);
  app.param('revision', validateName);
  app.param('token', validateName);

  // these can't be safely put into express url for some reason
  // TODO: For some reason? what reason?
  app.param('_rev', match(/^-rev$/));
  app.param('org_couchdb_user', match(/^org\.couchdb\.user:/));
  app.param('anything', match(/.*/));
  app.use(auth.apiJWTmiddleware());
  app.use(_bodyParser.default.json({
    strict: false,
    limit: config.max_body_size || '10mb'
  }));
  app.use(antiLoop(config));
  // encode / in a scoped package name to be matched as a single parameter in routes
  app.use(encodeScopePackage);
  // for "npm whoami"
  (0, _whoami.default)(app);
  (0, _package.default)(app, auth, storage, config);
  (0, _search.default)(app, auth, storage);
  (0, _distTags.default)(app, auth, storage);
  (0, _publish.default)(app, auth, storage, config);
  (0, _ping.default)(app);
  (0, _stars.default)(app, storage);
  (0, _search2.default)(app, auth, storage);
  (0, _user.default)(app, auth, config);
  app.use((0, _v.default)(auth, storage, config));
  return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtYXRjaCIsInZhbGlkYXRlTmFtZSIsInZhbGlkYXRlUGFja2FnZSIsImVuY29kZVNjb3BlUGFja2FnZSIsImFudGlMb29wIiwicmVxdWlyZSIsImNvbmZpZyIsImF1dGgiLCJzdG9yYWdlIiwiYXBwIiwiZXhwcmVzcyIsIlJvdXRlciIsInBhcmFtIiwidXNlIiwiYXBpSldUbWlkZGxld2FyZSIsImJvZHlQYXJzZXIiLCJqc29uIiwic3RyaWN0IiwibGltaXQiLCJtYXhfYm9keV9zaXplIiwid2hvYW1pIiwicGtnIiwic2VhcmNoIiwiZGlzdFRhZ3MiLCJwdWJsaXNoIiwicGluZyIsInN0YXJzIiwidjFTZWFyY2giLCJ1c2VyIiwibnBtVjEiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL2VuZHBvaW50L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcblxuaW1wb3J0IHsgSUF1dGgsIElTdG9yYWdlSGFuZGxlciB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBkaXN0VGFncyBmcm9tICcuL2FwaS9kaXN0LXRhZ3MnO1xuaW1wb3J0IHBrZyBmcm9tICcuL2FwaS9wYWNrYWdlJztcbmltcG9ydCBwaW5nIGZyb20gJy4vYXBpL3BpbmcnO1xuaW1wb3J0IHB1Ymxpc2ggZnJvbSAnLi9hcGkvcHVibGlzaCc7XG5pbXBvcnQgc2VhcmNoIGZyb20gJy4vYXBpL3NlYXJjaCc7XG5pbXBvcnQgc3RhcnMgZnJvbSAnLi9hcGkvc3RhcnMnO1xuaW1wb3J0IHVzZXIgZnJvbSAnLi9hcGkvdXNlcic7XG5pbXBvcnQgbnBtVjEgZnJvbSAnLi9hcGkvdjEnO1xuaW1wb3J0IHYxU2VhcmNoIGZyb20gJy4vYXBpL3YxL3NlYXJjaCc7XG5pbXBvcnQgd2hvYW1pIGZyb20gJy4vYXBpL3dob2FtaSc7XG5cbmNvbnN0IHtcbiAgbWF0Y2gsXG4gIHZhbGlkYXRlTmFtZSxcbiAgdmFsaWRhdGVQYWNrYWdlLFxuICBlbmNvZGVTY29wZVBhY2thZ2UsXG4gIGFudGlMb29wLFxufSA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmUnKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmZpZzogQ29uZmlnLCBhdXRoOiBJQXV0aCwgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyKSB7XG4gIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICBjb25zdCBhcHAgPSBleHByZXNzLlJvdXRlcigpO1xuICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgLy8gdmFsaWRhdGUgYWxsIG9mIHRoZXNlIHBhcmFtcyBhcyBhIHBhY2thZ2UgbmFtZVxuICAvLyB0aGlzIG1pZ2h0IGJlIHRvbyBoYXJzaCwgc28gYXNrIGlmIGl0IGNhdXNlcyB0cm91YmxlXG4gIGFwcC5wYXJhbSgncGFja2FnZScsIHZhbGlkYXRlUGFja2FnZSk7XG4gIGFwcC5wYXJhbSgnZmlsZW5hbWUnLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3RhZycsIHZhbGlkYXRlTmFtZSk7XG4gIGFwcC5wYXJhbSgndmVyc2lvbicsIHZhbGlkYXRlTmFtZSk7XG4gIGFwcC5wYXJhbSgncmV2aXNpb24nLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3Rva2VuJywgdmFsaWRhdGVOYW1lKTtcblxuICAvLyB0aGVzZSBjYW4ndCBiZSBzYWZlbHkgcHV0IGludG8gZXhwcmVzcyB1cmwgZm9yIHNvbWUgcmVhc29uXG4gIC8vIFRPRE86IEZvciBzb21lIHJlYXNvbj8gd2hhdCByZWFzb24/XG4gIGFwcC5wYXJhbSgnX3JldicsIG1hdGNoKC9eLXJldiQvKSk7XG4gIGFwcC5wYXJhbSgnb3JnX2NvdWNoZGJfdXNlcicsIG1hdGNoKC9eb3JnXFwuY291Y2hkYlxcLnVzZXI6LykpO1xuICBhcHAucGFyYW0oJ2FueXRoaW5nJywgbWF0Y2goLy4qLykpO1xuXG4gIGFwcC51c2UoYXV0aC5hcGlKV1RtaWRkbGV3YXJlKCkpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbih7IHN0cmljdDogZmFsc2UsIGxpbWl0OiBjb25maWcubWF4X2JvZHlfc2l6ZSB8fCAnMTBtYicgfSkpO1xuICBhcHAudXNlKGFudGlMb29wKGNvbmZpZykpO1xuICAvLyBlbmNvZGUgLyBpbiBhIHNjb3BlZCBwYWNrYWdlIG5hbWUgdG8gYmUgbWF0Y2hlZCBhcyBhIHNpbmdsZSBwYXJhbWV0ZXIgaW4gcm91dGVzXG4gIGFwcC51c2UoZW5jb2RlU2NvcGVQYWNrYWdlKTtcbiAgLy8gZm9yIFwibnBtIHdob2FtaVwiXG4gIHdob2FtaShhcHApO1xuICBwa2coYXBwLCBhdXRoLCBzdG9yYWdlLCBjb25maWcpO1xuICBzZWFyY2goYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgZGlzdFRhZ3MoYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgcHVibGlzaChhcHAsIGF1dGgsIHN0b3JhZ2UsIGNvbmZpZyk7XG4gIHBpbmcoYXBwKTtcbiAgc3RhcnMoYXBwLCBzdG9yYWdlKTtcbiAgdjFTZWFyY2goYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgdXNlcihhcHAsIGF1dGgsIGNvbmZpZyk7XG4gIGFwcC51c2UobnBtVjEoYXV0aCwgc3RvcmFnZSwgY29uZmlnKSk7XG4gIHJldHVybiBhcHA7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFrQztBQUVsQyxNQUFNO0VBQ0pBLEtBQUs7RUFDTEMsWUFBWTtFQUNaQyxlQUFlO0VBQ2ZDLGtCQUFrQjtFQUNsQkM7QUFDRixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFYixrQkFBVUMsTUFBYyxFQUFFQyxJQUFXLEVBQUVDLE9BQXdCLEVBQUU7RUFDOUU7RUFDQSxNQUFNQyxHQUFHLEdBQUdDLGdCQUFPLENBQUNDLE1BQU0sRUFBRTtFQUM1QjtFQUNBO0VBQ0E7RUFDQUYsR0FBRyxDQUFDRyxLQUFLLENBQUMsU0FBUyxFQUFFVixlQUFlLENBQUM7RUFDckNPLEdBQUcsQ0FBQ0csS0FBSyxDQUFDLFVBQVUsRUFBRVgsWUFBWSxDQUFDO0VBQ25DUSxHQUFHLENBQUNHLEtBQUssQ0FBQyxLQUFLLEVBQUVYLFlBQVksQ0FBQztFQUM5QlEsR0FBRyxDQUFDRyxLQUFLLENBQUMsU0FBUyxFQUFFWCxZQUFZLENBQUM7RUFDbENRLEdBQUcsQ0FBQ0csS0FBSyxDQUFDLFVBQVUsRUFBRVgsWUFBWSxDQUFDO0VBQ25DUSxHQUFHLENBQUNHLEtBQUssQ0FBQyxPQUFPLEVBQUVYLFlBQVksQ0FBQzs7RUFFaEM7RUFDQTtFQUNBUSxHQUFHLENBQUNHLEtBQUssQ0FBQyxNQUFNLEVBQUVaLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNsQ1MsR0FBRyxDQUFDRyxLQUFLLENBQUMsa0JBQWtCLEVBQUVaLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0VBQzVEUyxHQUFHLENBQUNHLEtBQUssQ0FBQyxVQUFVLEVBQUVaLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUVsQ1MsR0FBRyxDQUFDSSxHQUFHLENBQUNOLElBQUksQ0FBQ08sZ0JBQWdCLEVBQUUsQ0FBQztFQUNoQ0wsR0FBRyxDQUFDSSxHQUFHLENBQUNFLG1CQUFVLENBQUNDLElBQUksQ0FBQztJQUFFQyxNQUFNLEVBQUUsS0FBSztJQUFFQyxLQUFLLEVBQUVaLE1BQU0sQ0FBQ2EsYUFBYSxJQUFJO0VBQU8sQ0FBQyxDQUFDLENBQUM7RUFDbEZWLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDVCxRQUFRLENBQUNFLE1BQU0sQ0FBQyxDQUFDO0VBQ3pCO0VBQ0FHLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDVixrQkFBa0IsQ0FBQztFQUMzQjtFQUNBLElBQUFpQixlQUFNLEVBQUNYLEdBQUcsQ0FBQztFQUNYLElBQUFZLGdCQUFHLEVBQUNaLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLEVBQUVGLE1BQU0sQ0FBQztFQUMvQixJQUFBZ0IsZUFBTSxFQUFDYixHQUFHLEVBQUVGLElBQUksRUFBRUMsT0FBTyxDQUFDO0VBQzFCLElBQUFlLGlCQUFRLEVBQUNkLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLENBQUM7RUFDNUIsSUFBQWdCLGdCQUFPLEVBQUNmLEdBQUcsRUFBRUYsSUFBSSxFQUFFQyxPQUFPLEVBQUVGLE1BQU0sQ0FBQztFQUNuQyxJQUFBbUIsYUFBSSxFQUFDaEIsR0FBRyxDQUFDO0VBQ1QsSUFBQWlCLGNBQUssRUFBQ2pCLEdBQUcsRUFBRUQsT0FBTyxDQUFDO0VBQ25CLElBQUFtQixnQkFBUSxFQUFDbEIsR0FBRyxFQUFFRixJQUFJLEVBQUVDLE9BQU8sQ0FBQztFQUM1QixJQUFBb0IsYUFBSSxFQUFDbkIsR0FBRyxFQUFFRixJQUFJLEVBQUVELE1BQU0sQ0FBQztFQUN2QkcsR0FBRyxDQUFDSSxHQUFHLENBQUMsSUFBQWdCLFVBQUssRUFBQ3RCLElBQUksRUFBRUMsT0FBTyxFQUFFRixNQUFNLENBQUMsQ0FBQztFQUNyQyxPQUFPRyxHQUFHO0FBQ1oifQ==