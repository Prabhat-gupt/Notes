"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = require("express");
var _lodash = _interopRequireDefault(require("lodash"));
var _authUtils = require("../../../lib/auth-utils");
var _constants = require("../../../lib/constants");
var _utils = require("../../../lib/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function addUserAuthApi(auth, config) {
  const route = (0, _express.Router)(); /* eslint new-cap: 0 */
  route.post('/login', function (req, res, next) {
    const {
      username,
      password
    } = req.body;
    auth.authenticate(username, password, async (err, user) => {
      if (err) {
        const errorCode = err.message ? _constants.HTTP_STATUS.UNAUTHORIZED : _constants.HTTP_STATUS.INTERNAL_ERROR;
        next(_utils.ErrorCode.getCode(errorCode, err.message));
      } else {
        req.remote_user = user;
        const jWTSignOptions = (0, _authUtils.getSecurity)(config).web.sign;
        res.set(_constants.HEADERS.CACHE_CONTROL, 'no-cache, no-store');
        next({
          token: await auth.jwtEncrypt(user, jWTSignOptions),
          username: req.remote_user.name
        });
      }
    });
  });
  route.put('/reset_password', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        // FUTURE: update to a more meaningful message
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }
    const {
      password
    } = req.body;
    const {
      name
    } = req.remote_user;
    if ((0, _authUtils.validatePassword)(password.new) === false) {
      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNil(err) && isUpdated) {
          next({
            ok: true
          });
        } else {
          return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
        }
      });
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.BAD_REQUEST, _constants.APP_ERROR.PASSWORD_VALIDATION));
    }
  });
  return route;
}
var _default = addUserAuthApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhZGRVc2VyQXV0aEFwaSIsImF1dGgiLCJjb25maWciLCJyb3V0ZSIsIlJvdXRlciIsInBvc3QiLCJyZXEiLCJyZXMiLCJuZXh0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImJvZHkiLCJhdXRoZW50aWNhdGUiLCJlcnIiLCJ1c2VyIiwiZXJyb3JDb2RlIiwibWVzc2FnZSIsIkhUVFBfU1RBVFVTIiwiVU5BVVRIT1JJWkVEIiwiSU5URVJOQUxfRVJST1IiLCJFcnJvckNvZGUiLCJnZXRDb2RlIiwicmVtb3RlX3VzZXIiLCJqV1RTaWduT3B0aW9ucyIsImdldFNlY3VyaXR5Iiwid2ViIiwic2lnbiIsInNldCIsIkhFQURFUlMiLCJDQUNIRV9DT05UUk9MIiwidG9rZW4iLCJqd3RFbmNyeXB0IiwibmFtZSIsInB1dCIsIl8iLCJpc05pbCIsInN0YXR1cyIsIkFQSV9FUlJPUiIsIk1VU1RfQkVfTE9HR0VEIiwidmFsaWRhdGVQYXNzd29yZCIsIm5ldyIsImNoYW5nZVBhc3N3b3JkIiwib2xkIiwiaXNVcGRhdGVkIiwib2siLCJnZXRJbnRlcm5hbEVycm9yIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJBUFBfRVJST1IiLCJQQVNTV09SRF9WQUxJREFUSU9OIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS93ZWIvZW5kcG9pbnQvdXNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBDb25maWcsIEpXVFNpZ25PcHRpb25zLCBSZW1vdGVVc2VyIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCB7IGdldFNlY3VyaXR5LCB2YWxpZGF0ZVBhc3N3b3JkIH0gZnJvbSAnLi4vLi4vLi4vbGliL2F1dGgtdXRpbHMnO1xuaW1wb3J0IHsgQVBJX0VSUk9SLCBBUFBfRVJST1IsIEhFQURFUlMsIEhUVFBfU1RBVFVTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tICcuLi8uLi8uLi9saWIvdXRpbHMnO1xuaW1wb3J0IHsgJE5leHRGdW5jdGlvblZlciwgSUF1dGggfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGFkZFVzZXJBdXRoQXBpKGF1dGg6IElBdXRoLCBjb25maWc6IENvbmZpZyk6IFJvdXRlciB7XG4gIGNvbnN0IHJvdXRlID0gUm91dGVyKCk7IC8qIGVzbGludCBuZXctY2FwOiAwICovXG4gIHJvdXRlLnBvc3QoJy9sb2dpbicsIGZ1bmN0aW9uIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG5cbiAgICBhdXRoLmF1dGhlbnRpY2F0ZSh1c2VybmFtZSwgcGFzc3dvcmQsIGFzeW5jIChlcnIsIHVzZXI6IFJlbW90ZVVzZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gZXJyLm1lc3NhZ2UgPyBIVFRQX1NUQVRVUy5VTkFVVEhPUklaRUQgOiBIVFRQX1NUQVRVUy5JTlRFUk5BTF9FUlJPUjtcbiAgICAgICAgbmV4dChFcnJvckNvZGUuZ2V0Q29kZShlcnJvckNvZGUsIGVyci5tZXNzYWdlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXEucmVtb3RlX3VzZXIgPSB1c2VyO1xuICAgICAgICBjb25zdCBqV1RTaWduT3B0aW9uczogSldUU2lnbk9wdGlvbnMgPSBnZXRTZWN1cml0eShjb25maWcpLndlYi5zaWduO1xuICAgICAgICByZXMuc2V0KEhFQURFUlMuQ0FDSEVfQ09OVFJPTCwgJ25vLWNhY2hlLCBuby1zdG9yZScpO1xuICAgICAgICBuZXh0KHtcbiAgICAgICAgICB0b2tlbjogYXdhaXQgYXV0aC5qd3RFbmNyeXB0KHVzZXIsIGpXVFNpZ25PcHRpb25zKSxcbiAgICAgICAgICB1c2VybmFtZTogcmVxLnJlbW90ZV91c2VyLm5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByb3V0ZS5wdXQoXG4gICAgJy9yZXNldF9wYXNzd29yZCcsXG4gICAgZnVuY3Rpb24gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgaWYgKF8uaXNOaWwocmVxLnJlbW90ZV91c2VyLm5hbWUpKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVEKTtcbiAgICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAgIC8vIEZVVFVSRTogdXBkYXRlIHRvIGEgbW9yZSBtZWFuaW5nZnVsIG1lc3NhZ2VcbiAgICAgICAgICBtZXNzYWdlOiBBUElfRVJST1IuTVVTVF9CRV9MT0dHRUQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHBhc3N3b3JkIH0gPSByZXEuYm9keTtcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcmVxLnJlbW90ZV91c2VyO1xuXG4gICAgICBpZiAodmFsaWRhdGVQYXNzd29yZChwYXNzd29yZC5uZXcpID09PSBmYWxzZSkge1xuICAgICAgICBhdXRoLmNoYW5nZVBhc3N3b3JkKG5hbWUgYXMgc3RyaW5nLCBwYXNzd29yZC5vbGQsIHBhc3N3b3JkLm5ldywgKGVyciwgaXNVcGRhdGVkKTogdm9pZCA9PiB7XG4gICAgICAgICAgaWYgKF8uaXNOaWwoZXJyKSAmJiBpc1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIG5leHQoe1xuICAgICAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0SW50ZXJuYWxFcnJvcihBUElfRVJST1IuSU5URVJOQUxfU0VSVkVSX0VSUk9SKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLkJBRF9SRVFVRVNULCBBUFBfRVJST1IuUEFTU1dPUkRfVkFMSURBVElPTikpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByZXR1cm4gcm91dGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFVzZXJBdXRoQXBpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQStDO0FBRy9DLFNBQVNBLGNBQWMsQ0FBQ0MsSUFBVyxFQUFFQyxNQUFjLEVBQVU7RUFDM0QsTUFBTUMsS0FBSyxHQUFHLElBQUFDLGVBQU0sR0FBRSxDQUFDLENBQUM7RUFDeEJELEtBQUssQ0FBQ0UsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVQyxHQUFZLEVBQUVDLEdBQWEsRUFBRUMsSUFBc0IsRUFBUTtJQUN4RixNQUFNO01BQUVDLFFBQVE7TUFBRUM7SUFBUyxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0ssSUFBSTtJQUV2Q1YsSUFBSSxDQUFDVyxZQUFZLENBQUNILFFBQVEsRUFBRUMsUUFBUSxFQUFFLE9BQU9HLEdBQUcsRUFBRUMsSUFBZ0IsS0FBb0I7TUFDcEYsSUFBSUQsR0FBRyxFQUFFO1FBQ1AsTUFBTUUsU0FBUyxHQUFHRixHQUFHLENBQUNHLE9BQU8sR0FBR0Msc0JBQVcsQ0FBQ0MsWUFBWSxHQUFHRCxzQkFBVyxDQUFDRSxjQUFjO1FBQ3JGWCxJQUFJLENBQUNZLGdCQUFTLENBQUNDLE9BQU8sQ0FBQ04sU0FBUyxFQUFFRixHQUFHLENBQUNHLE9BQU8sQ0FBQyxDQUFDO01BQ2pELENBQUMsTUFBTTtRQUNMVixHQUFHLENBQUNnQixXQUFXLEdBQUdSLElBQUk7UUFDdEIsTUFBTVMsY0FBOEIsR0FBRyxJQUFBQyxzQkFBVyxFQUFDdEIsTUFBTSxDQUFDLENBQUN1QixHQUFHLENBQUNDLElBQUk7UUFDbkVuQixHQUFHLENBQUNvQixHQUFHLENBQUNDLGtCQUFPLENBQUNDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQztRQUNwRHJCLElBQUksQ0FBQztVQUNIc0IsS0FBSyxFQUFFLE1BQU03QixJQUFJLENBQUM4QixVQUFVLENBQUNqQixJQUFJLEVBQUVTLGNBQWMsQ0FBQztVQUNsRGQsUUFBUSxFQUFFSCxHQUFHLENBQUNnQixXQUFXLENBQUNVO1FBQzVCLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUY3QixLQUFLLENBQUM4QixHQUFHLENBQ1AsaUJBQWlCLEVBQ2pCLFVBQVUzQixHQUFZLEVBQUVDLEdBQWEsRUFBRUMsSUFBc0IsRUFBUTtJQUNuRSxJQUFJMEIsZUFBQyxDQUFDQyxLQUFLLENBQUM3QixHQUFHLENBQUNnQixXQUFXLENBQUNVLElBQUksQ0FBQyxFQUFFO01BQ2pDekIsR0FBRyxDQUFDNkIsTUFBTSxDQUFDbkIsc0JBQVcsQ0FBQ0MsWUFBWSxDQUFDO01BQ3BDLE9BQU9WLElBQUksQ0FBQztRQUNWO1FBQ0FRLE9BQU8sRUFBRXFCLG9CQUFTLENBQUNDO01BQ3JCLENBQUMsQ0FBQztJQUNKO0lBRUEsTUFBTTtNQUFFNUI7SUFBUyxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0ssSUFBSTtJQUM3QixNQUFNO01BQUVxQjtJQUFLLENBQUMsR0FBRzFCLEdBQUcsQ0FBQ2dCLFdBQVc7SUFFaEMsSUFBSSxJQUFBaUIsMkJBQWdCLEVBQUM3QixRQUFRLENBQUM4QixHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUU7TUFDNUN2QyxJQUFJLENBQUN3QyxjQUFjLENBQUNULElBQUksRUFBWXRCLFFBQVEsQ0FBQ2dDLEdBQUcsRUFBRWhDLFFBQVEsQ0FBQzhCLEdBQUcsRUFBRSxDQUFDM0IsR0FBRyxFQUFFOEIsU0FBUyxLQUFXO1FBQ3hGLElBQUlULGVBQUMsQ0FBQ0MsS0FBSyxDQUFDdEIsR0FBRyxDQUFDLElBQUk4QixTQUFTLEVBQUU7VUFDN0JuQyxJQUFJLENBQUM7WUFDSG9DLEVBQUUsRUFBRTtVQUNOLENBQUMsQ0FBQztRQUNKLENBQUMsTUFBTTtVQUNMLE9BQU9wQyxJQUFJLENBQUNZLGdCQUFTLENBQUN5QixnQkFBZ0IsQ0FBQ1Isb0JBQVMsQ0FBQ1MscUJBQXFCLENBQUMsQ0FBQztRQUMxRTtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUMsTUFBTTtNQUNMLE9BQU90QyxJQUFJLENBQUNZLGdCQUFTLENBQUNDLE9BQU8sQ0FBQ0osc0JBQVcsQ0FBQzhCLFdBQVcsRUFBRUMsb0JBQVMsQ0FBQ0MsbUJBQW1CLENBQUMsQ0FBQztJQUN4RjtFQUNGLENBQUMsQ0FDRjtFQUVELE9BQU85QyxLQUFLO0FBQ2Q7QUFBQyxlQUVjSCxjQUFjO0FBQUEifQ==