"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _assert = _interopRequireDefault(require("assert"));
var _lodash = _interopRequireDefault(require("lodash"));
var _utils = require("@verdaccio/utils");
var _authUtils = require("./auth-utils");
var _configUtils = require("./config-utils");
var _constants = require("./constants");
var _utils2 = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const LoggerApi = require('./logger');
const strategicConfigProps = ['uplinks', 'packages'];
const allowedEnvConfig = ['http_proxy', 'https_proxy', 'no_proxy'];

/**
 * Coordinates the application configuration
 */
class Config {
  // @ts-ignore

  // @ts-ignore

  // @ts-ignore

  constructor(config) {
    _defineProperty(this, "logger", void 0);
    _defineProperty(this, "user_agent", void 0);
    _defineProperty(this, "secret", void 0);
    _defineProperty(this, "uplinks", void 0);
    _defineProperty(this, "packages", void 0);
    _defineProperty(this, "users", void 0);
    _defineProperty(this, "userRateLimit", void 0);
    _defineProperty(this, "server_id", void 0);
    _defineProperty(this, "self_path", void 0);
    _defineProperty(this, "storage", void 0);
    _defineProperty(this, "plugins", void 0);
    _defineProperty(this, "security", void 0);
    const self = this;
    this.logger = LoggerApi.logger;
    this.self_path = config.self_path;
    this.storage = process.env.VERDACCIO_STORAGE_PATH || config.storage;
    this.plugins = config.plugins;
    for (const configProp in config) {
      if (self[configProp] == null) {
        self[configProp] = config[configProp];
      }
    }
    if (config !== null && config !== void 0 && config.user_agent) {
      this.user_agent = (0, _utils2.getUserAgent)(config === null || config === void 0 ? void 0 : config.user_agent);
    }
    this.userRateLimit = _objectSpread(_objectSpread({}, _authUtils.defaultUserRateLimiting), config === null || config === void 0 ? void 0 : config.userRateLimit);

    // some weird shell scripts are valid yaml files parsed as string
    (0, _assert.default)(_lodash.default.isObject(config), _constants.APP_ERROR.CONFIG_NOT_VALID);

    // sanity check for strategic config properties
    strategicConfigProps.forEach(function (x) {
      if (self[x] == null) {
        self[x] = {};
      }
      (0, _assert.default)((0, _utils2.isObject)(self[x]), `CONFIG: bad "${x}" value (object expected)`);
    });
    this.uplinks = (0, _configUtils.sanityCheckUplinksProps)((0, _configUtils.uplinkSanityCheck)(this.uplinks));
    if (_lodash.default.isNil(this.users) === false) {
      this.logger.warn(`[users]: property on configuration file
      is not longer supported, property being ignored`);
    }
    this.packages = (0, _configUtils.normalisePackageAccess)(self.packages);

    // loading these from ENV if aren't in config
    allowedEnvConfig.forEach(envConf => {
      if (!(envConf in self)) {
        self[envConf] = process.env[envConf] || process.env[envConf.toUpperCase()];
      }
    });

    // unique identifier of self server (or a cluster), used to avoid loops
    // @ts-ignore
    if (!this.server_id) {
      this.server_id = (0, _utils.generateRandomHexString)(6);
    }
  }

  /**
   * Check for package spec
   */
  getMatchedPackagesSpec(pkgName) {
    return (0, _utils.getMatchedPackagesSpec)(pkgName, this.packages);
  }

  /**
   * Store or create whether receive a secret key
   */
  checkSecretKey(secret) {
    if (_lodash.default.isString(secret) && _lodash.default.isEmpty(secret) === false) {
      this.secret = secret;
      return secret;
    }
    // it generates a secret key
    // FUTURE: this might be an external secret key, perhaps within config file?
    this.secret = (0, _utils.generateRandomHexString)(32);
    return this.secret;
  }
}
var _default = Config;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,