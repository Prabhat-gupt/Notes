"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeVersions = mergeVersions;
var _lodash = _interopRequireDefault(require("lodash"));
var _semver = _interopRequireDefault(require("semver"));
var _constants = require("./constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Function gets a local info and an info from uplinks and tries to merge it
 exported for unit tests only.
  * @param {*} local
  * @param {*} up
  * @param {*} config
  * @static
  */
function mergeVersions(local, up) {
  // copy new versions to a cache
  // NOTE: if a certain version was updated, we can't refresh it reliably
  for (const i in up.versions) {
    if (_lodash.default.isNil(local.versions[i])) {
      local.versions[i] = up.versions[i];
    }
  }
  for (const i in up[_constants.DIST_TAGS]) {
    if (local[_constants.DIST_TAGS][i] !== up[_constants.DIST_TAGS][i]) {
      if (!local[_constants.DIST_TAGS][i] || _semver.default.lte(local[_constants.DIST_TAGS][i], up[_constants.DIST_TAGS][i])) {
        local[_constants.DIST_TAGS][i] = up[_constants.DIST_TAGS][i];
      }
      if (i === 'latest' && local[_constants.DIST_TAGS][i] === up[_constants.DIST_TAGS][i]) {
        // if remote has more fresh package, we should borrow its readme
        local.readme = up.readme;
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZVZlcnNpb25zIiwibG9jYWwiLCJ1cCIsImkiLCJ2ZXJzaW9ucyIsIl8iLCJpc05pbCIsIkRJU1RfVEFHUyIsInNlbXZlciIsImx0ZSIsInJlYWRtZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvbWV0YWRhdGEtdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgeyBESVNUX1RBR1MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogRnVuY3Rpb24gZ2V0cyBhIGxvY2FsIGluZm8gYW5kIGFuIGluZm8gZnJvbSB1cGxpbmtzIGFuZCB0cmllcyB0byBtZXJnZSBpdFxuIGV4cG9ydGVkIGZvciB1bml0IHRlc3RzIG9ubHkuXG4gICogQHBhcmFtIHsqfSBsb2NhbFxuICAqIEBwYXJhbSB7Kn0gdXBcbiAgKiBAcGFyYW0geyp9IGNvbmZpZ1xuICAqIEBzdGF0aWNcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVZlcnNpb25zKGxvY2FsOiBQYWNrYWdlLCB1cDogUGFja2FnZSkge1xuICAvLyBjb3B5IG5ldyB2ZXJzaW9ucyB0byBhIGNhY2hlXG4gIC8vIE5PVEU6IGlmIGEgY2VydGFpbiB2ZXJzaW9uIHdhcyB1cGRhdGVkLCB3ZSBjYW4ndCByZWZyZXNoIGl0IHJlbGlhYmx5XG4gIGZvciAoY29uc3QgaSBpbiB1cC52ZXJzaW9ucykge1xuICAgIGlmIChfLmlzTmlsKGxvY2FsLnZlcnNpb25zW2ldKSkge1xuICAgICAgbG9jYWwudmVyc2lvbnNbaV0gPSB1cC52ZXJzaW9uc1tpXTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGkgaW4gdXBbRElTVF9UQUdTXSkge1xuICAgIGlmIChsb2NhbFtESVNUX1RBR1NdW2ldICE9PSB1cFtESVNUX1RBR1NdW2ldKSB7XG4gICAgICBpZiAoIWxvY2FsW0RJU1RfVEFHU11baV0gfHwgc2VtdmVyLmx0ZShsb2NhbFtESVNUX1RBR1NdW2ldLCB1cFtESVNUX1RBR1NdW2ldKSkge1xuICAgICAgICBsb2NhbFtESVNUX1RBR1NdW2ldID0gdXBbRElTVF9UQUdTXVtpXTtcbiAgICAgIH1cbiAgICAgIGlmIChpID09PSAnbGF0ZXN0JyAmJiBsb2NhbFtESVNUX1RBR1NdW2ldID09PSB1cFtESVNUX1RBR1NdW2ldKSB7XG4gICAgICAgIC8vIGlmIHJlbW90ZSBoYXMgbW9yZSBmcmVzaCBwYWNrYWdlLCB3ZSBzaG91bGQgYm9ycm93IGl0cyByZWFkbWVcbiAgICAgICAgbG9jYWwucmVhZG1lID0gdXAucmVhZG1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBSUE7QUFBd0M7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLGFBQWEsQ0FBQ0MsS0FBYyxFQUFFQyxFQUFXLEVBQUU7RUFDekQ7RUFDQTtFQUNBLEtBQUssTUFBTUMsQ0FBQyxJQUFJRCxFQUFFLENBQUNFLFFBQVEsRUFBRTtJQUMzQixJQUFJQyxlQUFDLENBQUNDLEtBQUssQ0FBQ0wsS0FBSyxDQUFDRyxRQUFRLENBQUNELENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDOUJGLEtBQUssQ0FBQ0csUUFBUSxDQUFDRCxDQUFDLENBQUMsR0FBR0QsRUFBRSxDQUFDRSxRQUFRLENBQUNELENBQUMsQ0FBQztJQUNwQztFQUNGO0VBRUEsS0FBSyxNQUFNQSxDQUFDLElBQUlELEVBQUUsQ0FBQ0ssb0JBQVMsQ0FBQyxFQUFFO0lBQzdCLElBQUlOLEtBQUssQ0FBQ00sb0JBQVMsQ0FBQyxDQUFDSixDQUFDLENBQUMsS0FBS0QsRUFBRSxDQUFDSyxvQkFBUyxDQUFDLENBQUNKLENBQUMsQ0FBQyxFQUFFO01BQzVDLElBQUksQ0FBQ0YsS0FBSyxDQUFDTSxvQkFBUyxDQUFDLENBQUNKLENBQUMsQ0FBQyxJQUFJSyxlQUFNLENBQUNDLEdBQUcsQ0FBQ1IsS0FBSyxDQUFDTSxvQkFBUyxDQUFDLENBQUNKLENBQUMsQ0FBQyxFQUFFRCxFQUFFLENBQUNLLG9CQUFTLENBQUMsQ0FBQ0osQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM3RUYsS0FBSyxDQUFDTSxvQkFBUyxDQUFDLENBQUNKLENBQUMsQ0FBQyxHQUFHRCxFQUFFLENBQUNLLG9CQUFTLENBQUMsQ0FBQ0osQ0FBQyxDQUFDO01BQ3hDO01BQ0EsSUFBSUEsQ0FBQyxLQUFLLFFBQVEsSUFBSUYsS0FBSyxDQUFDTSxvQkFBUyxDQUFDLENBQUNKLENBQUMsQ0FBQyxLQUFLRCxFQUFFLENBQUNLLG9CQUFTLENBQUMsQ0FBQ0osQ0FBQyxDQUFDLEVBQUU7UUFDOUQ7UUFDQUYsS0FBSyxDQUFDUyxNQUFNLEdBQUdSLEVBQUUsQ0FBQ1EsTUFBTTtNQUMxQjtJQUNGO0VBQ0Y7QUFDRiJ9