"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash"));
var _utils = require("@verdaccio/utils");
var _pluginLoader = _interopRequireDefault(require("../lib/plugin-loader"));
var _authUtils = require("./auth-utils");
var _constants = require("./constants");
var _cryptoUtils = require("./crypto-utils");
var _logger = require("./logger");
var _utils2 = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const debug = (0, _debug.default)('verdaccio:auth');
class Auth {
  // pragma: allowlist secret

  constructor(config) {
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "logger", void 0);
    _defineProperty(this, "secret", void 0);
    _defineProperty(this, "plugins", void 0);
    this.config = config;
    this.logger = _logger.logger;
    this.secret = config.secret;
    this.plugins = this._loadPlugin(config);
    this._applyDefaultPlugins();
  }
  _loadPlugin(config) {
    const pluginOptions = {
      config,
      logger: this.logger
    };
    return (0, _pluginLoader.default)(config, config.auth, pluginOptions, plugin => {
      const {
        authenticate,
        allow_access,
        allow_publish
      } = plugin;
      // @ts-ignore
      return authenticate || allow_access || allow_publish;
    });
  }
  _applyDefaultPlugins() {
    this.plugins.push((0, _authUtils.getDefaultPlugins)(this.logger));
  }
  changePassword(username, password,
  // pragma: allowlist secret
  newPassword,
  // pragma: allowlist secret
  cb) {
    const validPlugins = _lodash.default.filter(this.plugins, plugin => _lodash.default.isFunction(plugin.changePassword));
    if (_lodash.default.isEmpty(validPlugins)) {
      return cb(_utils2.ErrorCode.getInternalError(_constants.SUPPORT_ERRORS.PLUGIN_MISSING_INTERFACE));
    }
    for (const plugin of validPlugins) {
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.changePassword) === false) {
        debug('auth plugin does not implement changePassword, trying next one');
        continue;
      } else {
        debug('updating password for %o', username);
        plugin.changePassword(username, password, newPassword, (err, profile) => {
          if (err) {
            this.logger.error({
              username,
              err
            }, `An error has been produced
            updating the password for @{username}. Error: @{err.message}`);
            return cb(err);
          }
          this.logger.info({
            username
          }, 'updated password for @{username} was successful');
          return cb(null, profile);
        });
      }
    }
  }
  authenticate(username, password, cb) {
    const plugins = this.plugins.slice(0);
    const self = this;
    (function next() {
      const plugin = plugins.shift();
      if (_lodash.default.isFunction(plugin.authenticate) === false) {
        return next();
      }
      debug('authenticating %o', username);
      plugin.authenticate(username, password, function (err, groups) {
        if (err) {
          self.logger.error({
            username,
            err
          }, 'authenticating for user @{username} failed. Error: @{err.message}');
          return cb(err);
        }

        // Expect: SKIP if groups is falsey and not an array
        //         with at least one item (truthy length)
        // Expect: CONTINUE otherwise (will error if groups is not
        //         an array, but this is current behavior)
        // Caveat: STRING (if valid) will pass successfully
        //         bug give unexpected results
        // Info: Cannot use `== false to check falsey values`
        if (!!groups && groups.length !== 0) {
          // TODO: create a better understanding of expectations
          if (_lodash.default.isString(groups)) {
            throw new TypeError('plugin group error: invalid type for function');
          }
          const isGroupValid = _lodash.default.isArray(groups);
          if (!isGroupValid) {
            throw new TypeError(_constants.API_ERROR.BAD_FORMAT_USER_GROUP);
          }
          debug('authentication for user %o was successfully. Groups: %o', username, groups);
          return cb(err, (0, _authUtils.createRemoteUser)(username, groups));
        }
        next();
      });
    })();
  }
  add_user(user, password, cb) {
    const self = this;
    const plugins = this.plugins.slice(0);
    debug('add user %o', user);
    (function next() {
      const plugin = plugins.shift();
      let method = 'adduser';
      if (_lodash.default.isFunction(plugin[method]) === false) {
        method = 'add_user';
        self.logger.warn('the plugin method add_user in the auth plugin is deprecated and will be removed in next major release, notify to the plugin author');
      }
      if (_lodash.default.isFunction(plugin[method]) === false) {
        next();
      } else {
        // p.add_user() execution
        plugin[method](user, password, function (err, ok) {
          if (err) {
            self.logger.error({
              user,
              err: err.message
            }, 'the user @{user} could not being added. Error: @{err}');
            return cb(err);
          }
          if (ok) {
            self.logger.info({
              user
            }, 'the user @{user} has been added');
            return self.authenticate(user, password, cb);
          }
          next();
        });
      }
    })();
  }

  /**
   * Allow user to access a package.
   */
  allow_access({
    packageName,
    packageVersion
  }, user, callback) {
    const plugins = this.plugins.slice(0);
    const self = this;
    const pkgAllowAcces = {
      name: packageName,
      version: packageVersion
    };
    const pkg = Object.assign({}, pkgAllowAcces, (0, _utils.getMatchedPackagesSpec)(packageName, this.config.packages));
    debug('allow access for %o', packageName);
    (function next() {
      const plugin = plugins.shift();
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.allow_access) === false) {
        return next();
      }
      plugin.allow_access(user, pkg, function (err, ok) {
        if (err) {
          self.logger.error({
            packageName,
            err
          }, 'forbidden access for @{packageName}. Error: @{err.message}');
          return callback(err);
        }
        if (ok) {
          self.logger.info({
            packageName
          }, 'allowed access for @{packageName}');
          return callback(null, ok);
        }
        next(); // cb(null, false) causes next plugin to roll
      });
    })();
  }

  allow_unpublish({
    packageName,
    packageVersion
  }, user, callback) {
    const pkg = Object.assign({
      name: packageName,
      version: packageVersion
    }, (0, _utils.getMatchedPackagesSpec)(packageName, this.config.packages));
    debug('allow unpublish for %o', packageName);
    for (const plugin of this.plugins) {
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.allow_unpublish) === false) {
        debug('allow unpublish for %o plugin does not implement allow_unpublish', packageName);
        continue;
      } else {
        plugin.allow_unpublish(user, pkg, (err, ok) => {
          if (err) {
            this.logger.error({
              packageName,
              user: user === null || user === void 0 ? void 0 : user.name
            }, '@{user} forbidden publish for @{packageName}, it will fallback on unpublish permissions');
            return callback(err);
          }
          if (_lodash.default.isNil(ok) === true) {
            debug('we bypass unpublish for %o, publish will handle the access', packageName);
            // @ts-ignore
            // eslint-disable-next-line
            return this.allow_publish(...arguments);
          }
          if (ok) {
            this.logger.info({
              packageName,
              user: user === null || user === void 0 ? void 0 : user.name
            }, '@{user} allowed unpublish for @{packageName}');
            return callback(null, ok);
          }
        });
      }
    }
  }

  /**
   * Allow user to publish a package.
   */
  allow_publish({
    packageName,
    packageVersion
  }, user, callback) {
    const plugins = this.plugins.slice(0);
    const self = this;
    const pkg = Object.assign({
      name: packageName,
      version: packageVersion
    }, (0, _utils.getMatchedPackagesSpec)(packageName, this.config.packages));
    debug('allow publish for %o init | plugins: %o', packageName, plugins);
    (function next() {
      const plugin = plugins.shift();
      if (_lodash.default.isNil(plugin) || _lodash.default.isFunction(plugin.allow_publish) === false) {
        debug('allow publish for %o plugin does not implement allow_publish', packageName);
        return next();
      }

      // @ts-ignore
      plugin.allow_publish(user, pkg, (err, ok) => {
        if (_lodash.default.isNil(err) === false && _lodash.default.isError(err)) {
          self.logger.error({
            packageName,
            user: user === null || user === void 0 ? void 0 : user.name
          }, '@{user} is forbidden publish for @{packageName}');
          return callback(err);
        }
        if (ok) {
          self.logger.info({
            packageName,
            user: user === null || user === void 0 ? void 0 : user.name
          }, '@{user} is allowed publish for @{packageName}');
          return callback(null, ok);
        }
        debug('allow publish skip validation for %o', packageName);
        next(); // cb(null, false) causes next plugin to roll
      });
    })();
  }

  apiJWTmiddleware() {
    const plugins = this.plugins.slice(0);
    const helpers = {
      createAnonymousRemoteUser: _authUtils.createAnonymousRemoteUser,
      createRemoteUser: _authUtils.createRemoteUser
    };
    for (const plugin of plugins) {
      if (plugin.apiJWTmiddleware) {
        return plugin.apiJWTmiddleware(helpers);
      }
    }
    return (req, res, _next) => {
      req.pause();
      const next = function (err) {
        req.resume();
        // uncomment this to reject users with bad auth headers
        // return _next.apply(null, arguments)
        // swallow error, user remains unauthorized
        // set remoteUserError to indicate that user was attempting authentication
        if (err) {
          req.remote_user.error = err.message;
        }
        return _next();
      };
      if (this._isRemoteUserValid(req.remote_user)) {
        // @ts-ignore
        return next();
      }

      // in case auth header does not exist we return anonymous function
      req.remote_user = (0, _authUtils.createAnonymousRemoteUser)();
      const {
        authorization
      } = req.headers;
      if (_lodash.default.isNil(authorization)) {
        // @ts-ignore
        return next();
      }
      if (!(0, _authUtils.isAuthHeaderValid)(authorization)) {
        debug('api middleware auth heather is not valid');
        return next(_utils2.ErrorCode.getBadRequest(_constants.API_ERROR.BAD_AUTH_HEADER));
      }
      const security = (0, _authUtils.getSecurity)(this.config);
      const {
        secret
      } = this.config;
      if ((0, _authUtils.isAESLegacy)(security)) {
        debug('api middleware using legacy auth token');
        this._handleAESMiddleware(req, security, secret, authorization, next);
      } else {
        debug('api middleware using JWT auth token');
        this._handleJWTAPIMiddleware(req, security, secret, authorization, next);
      }
    };
  }
  _handleJWTAPIMiddleware(req, security, secret, authorization, next) {
    const {
      scheme,
      token
    } = (0, _authUtils.parseAuthTokenHeader)(authorization);
    if (scheme.toUpperCase() === _constants.TOKEN_BASIC.toUpperCase()) {
      // this should happen when client tries to login with an existing user
      const credentials = (0, _utils2.convertPayloadToBase64)(token).toString();
      const {
        user,
        password
      } = (0, _authUtils.parseBasicPayload)(credentials);
      this.authenticate(user, password, (err, user) => {
        if (!err) {
          req.remote_user = user;
          next();
        } else {
          req.remote_user = (0, _authUtils.createAnonymousRemoteUser)();
          next(err);
        }
      });
    } else {
      // jwt handler
      const credentials = (0, _authUtils.getMiddlewareCredentials)(security, secret, authorization);
      if (credentials) {
        // if the signature is valid we rely on it
        req.remote_user = credentials;
        next();
      } else {
        // with JWT throw 401
        next(_utils2.ErrorCode.getForbidden(_constants.API_ERROR.BAD_USERNAME_PASSWORD));
      }
    }
  }
  _handleAESMiddleware(req, security, secret, authorization, next) {
    const credentials = (0, _authUtils.getMiddlewareCredentials)(security, secret, authorization);
    if (credentials) {
      const {
        user,
        password
      } = credentials;
      this.authenticate(user, password, (err, user) => {
        if (!err) {
          req.remote_user = user;
          next();
        } else {
          req.remote_user = (0, _authUtils.createAnonymousRemoteUser)();
          next(err);
        }
      });
    } else {
      // we force npm client to ask again with basic authentication
      return next(_utils2.ErrorCode.getBadRequest(_constants.API_ERROR.BAD_AUTH_HEADER));
    }
  }
  _isRemoteUserValid(remote_user) {
    return _lodash.default.isUndefined(remote_user) === false && _lodash.default.isUndefined(remote_user.name) === false;
  }

  /**
   * JWT middleware for WebUI
   */
  webUIJWTmiddleware() {
    return (req, res, _next) => {
      if (this._isRemoteUserValid(req.remote_user)) {
        return _next();
      }
      req.pause();
      const next = err => {
        req.resume();
        if (err) {
          // req.remote_user.error = err.message;
          res.status(err.statusCode).send(err.message);
        }
        return _next();
      };
      const {
        authorization
      } = req.headers;
      if (_lodash.default.isNil(authorization)) {
        // @ts-ignore
        return next();
      }
      if (!(0, _authUtils.isAuthHeaderValid)(authorization)) {
        return next(_utils2.ErrorCode.getBadRequest(_constants.API_ERROR.BAD_AUTH_HEADER));
      }
      const token = (authorization || '').replace(`${_constants.TOKEN_BEARER} `, '');
      if (!token) {
        // @ts-ignore
        return next();
      }
      let credentials;
      try {
        credentials = (0, _authUtils.verifyJWTPayload)(token, this.config.secret);
      } catch (err) {
        // FIXME: intended behaviour, do we want it?
      }
      if (this._isRemoteUserValid(credentials)) {
        const {
          name,
          groups
        } = credentials;
        req.remote_user = (0, _authUtils.createRemoteUser)(name, groups);
      } else {
        req.remote_user = (0, _authUtils.createAnonymousRemoteUser)();
      }
      // @ts-ignore
      next();
    };
  }
  async jwtEncrypt(user, signOptions) {
    const {
      real_groups,
      name,
      groups
    } = user;
    const realGroupsValidated = _lodash.default.isNil(real_groups) ? [] : real_groups;
    const groupedGroups = _lodash.default.isNil(groups) ? real_groups : Array.from(new Set([...groups.concat(realGroupsValidated)]));
    const payload = {
      real_groups: realGroupsValidated,
      name,
      groups: groupedGroups
    };
    const token = await (0, _cryptoUtils.signPayload)(payload, this.secret, signOptions);
    return token;
  }

  /**
   * Encrypt a string.
   */
  aesEncrypt(buf) {
    return (0, _cryptoUtils.aesEncrypt)(buf, this.secret);
  }
}
var _default = Auth;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWJ1ZyIsImJ1aWxkRGVidWciLCJBdXRoIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJsb2dnZXIiLCJzZWNyZXQiLCJwbHVnaW5zIiwiX2xvYWRQbHVnaW4iLCJfYXBwbHlEZWZhdWx0UGx1Z2lucyIsInBsdWdpbk9wdGlvbnMiLCJsb2FkUGx1Z2luIiwiYXV0aCIsInBsdWdpbiIsImF1dGhlbnRpY2F0ZSIsImFsbG93X2FjY2VzcyIsImFsbG93X3B1Ymxpc2giLCJwdXNoIiwiZ2V0RGVmYXVsdFBsdWdpbnMiLCJjaGFuZ2VQYXNzd29yZCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsImNiIiwidmFsaWRQbHVnaW5zIiwiXyIsImZpbHRlciIsImlzRnVuY3Rpb24iLCJpc0VtcHR5IiwiRXJyb3JDb2RlIiwiZ2V0SW50ZXJuYWxFcnJvciIsIlNVUFBPUlRfRVJST1JTIiwiUExVR0lOX01JU1NJTkdfSU5URVJGQUNFIiwiaXNOaWwiLCJlcnIiLCJwcm9maWxlIiwiZXJyb3IiLCJpbmZvIiwic2xpY2UiLCJzZWxmIiwibmV4dCIsInNoaWZ0IiwiZ3JvdXBzIiwibGVuZ3RoIiwiaXNTdHJpbmciLCJUeXBlRXJyb3IiLCJpc0dyb3VwVmFsaWQiLCJpc0FycmF5IiwiQVBJX0VSUk9SIiwiQkFEX0ZPUk1BVF9VU0VSX0dST1VQIiwiY3JlYXRlUmVtb3RlVXNlciIsImFkZF91c2VyIiwidXNlciIsIm1ldGhvZCIsIndhcm4iLCJvayIsIm1lc3NhZ2UiLCJwYWNrYWdlTmFtZSIsInBhY2thZ2VWZXJzaW9uIiwiY2FsbGJhY2siLCJwa2dBbGxvd0FjY2VzIiwibmFtZSIsInZlcnNpb24iLCJwa2ciLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRNYXRjaGVkUGFja2FnZXNTcGVjIiwicGFja2FnZXMiLCJhbGxvd191bnB1Ymxpc2giLCJhcmd1bWVudHMiLCJpc0Vycm9yIiwiYXBpSldUbWlkZGxld2FyZSIsImhlbHBlcnMiLCJjcmVhdGVBbm9ueW1vdXNSZW1vdGVVc2VyIiwicmVxIiwicmVzIiwiX25leHQiLCJwYXVzZSIsInJlc3VtZSIsInJlbW90ZV91c2VyIiwiX2lzUmVtb3RlVXNlclZhbGlkIiwiYXV0aG9yaXphdGlvbiIsImhlYWRlcnMiLCJpc0F1dGhIZWFkZXJWYWxpZCIsImdldEJhZFJlcXVlc3QiLCJCQURfQVVUSF9IRUFERVIiLCJzZWN1cml0eSIsImdldFNlY3VyaXR5IiwiaXNBRVNMZWdhY3kiLCJfaGFuZGxlQUVTTWlkZGxld2FyZSIsIl9oYW5kbGVKV1RBUElNaWRkbGV3YXJlIiwic2NoZW1lIiwidG9rZW4iLCJwYXJzZUF1dGhUb2tlbkhlYWRlciIsInRvVXBwZXJDYXNlIiwiVE9LRU5fQkFTSUMiLCJjcmVkZW50aWFscyIsImNvbnZlcnRQYXlsb2FkVG9CYXNlNjQiLCJ0b1N0cmluZyIsInBhcnNlQmFzaWNQYXlsb2FkIiwiZ2V0TWlkZGxld2FyZUNyZWRlbnRpYWxzIiwiZ2V0Rm9yYmlkZGVuIiwiQkFEX1VTRVJOQU1FX1BBU1NXT1JEIiwiaXNVbmRlZmluZWQiLCJ3ZWJVSUpXVG1pZGRsZXdhcmUiLCJzdGF0dXMiLCJzdGF0dXNDb2RlIiwic2VuZCIsInJlcGxhY2UiLCJUT0tFTl9CRUFSRVIiLCJ2ZXJpZnlKV1RQYXlsb2FkIiwiand0RW5jcnlwdCIsInNpZ25PcHRpb25zIiwicmVhbF9ncm91cHMiLCJyZWFsR3JvdXBzVmFsaWRhdGVkIiwiZ3JvdXBlZEdyb3VwcyIsIkFycmF5IiwiZnJvbSIsIlNldCIsImNvbmNhdCIsInBheWxvYWQiLCJzaWduUGF5bG9hZCIsImFlc0VuY3J5cHQiLCJidWYiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2F1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJ1aWxkRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICBBbGxvd0FjY2VzcyxcbiAgQXV0aFBsdWdpblBhY2thZ2UsXG4gIENhbGxiYWNrLFxuICBDb25maWcsXG4gIElQbHVnaW5BdXRoLFxuICBKV1RTaWduT3B0aW9ucyxcbiAgTG9nZ2VyLFxuICBQYWNrYWdlQWNjZXNzLFxuICBSZW1vdGVVc2VyLFxuICBTZWN1cml0eSxcbn0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5pbXBvcnQgeyBnZXRNYXRjaGVkUGFja2FnZXNTcGVjIH0gZnJvbSAnQHZlcmRhY2Npby91dGlscyc7XG5cbmltcG9ydCBsb2FkUGx1Z2luIGZyb20gJy4uL2xpYi9wbHVnaW4tbG9hZGVyJztcbmltcG9ydCB7ICRSZXF1ZXN0RXh0ZW5kLCAkUmVzcG9uc2VFeHRlbmQsIEFFU1BheWxvYWQsIElBdXRoIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgY3JlYXRlQW5vbnltb3VzUmVtb3RlVXNlcixcbiAgY3JlYXRlUmVtb3RlVXNlcixcbiAgZ2V0RGVmYXVsdFBsdWdpbnMsXG4gIGdldE1pZGRsZXdhcmVDcmVkZW50aWFscyxcbiAgZ2V0U2VjdXJpdHksXG4gIGlzQUVTTGVnYWN5LFxuICBpc0F1dGhIZWFkZXJWYWxpZCxcbiAgcGFyc2VBdXRoVG9rZW5IZWFkZXIsXG4gIHBhcnNlQmFzaWNQYXlsb2FkLFxuICB2ZXJpZnlKV1RQYXlsb2FkLFxufSBmcm9tICcuL2F1dGgtdXRpbHMnO1xuaW1wb3J0IHsgQVBJX0VSUk9SLCBTVVBQT1JUX0VSUk9SUywgVE9LRU5fQkFTSUMsIFRPS0VOX0JFQVJFUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGFlc0VuY3J5cHQsIHNpZ25QYXlsb2FkIH0gZnJvbSAnLi9jcnlwdG8tdXRpbHMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgRXJyb3JDb2RlLCBjb252ZXJ0UGF5bG9hZFRvQmFzZTY0IH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGRlYnVnID0gYnVpbGREZWJ1ZygndmVyZGFjY2lvOmF1dGgnKTtcblxuY2xhc3MgQXV0aCBpbXBsZW1lbnRzIElBdXRoIHtcbiAgcHVibGljIGNvbmZpZzogQ29uZmlnO1xuICBwdWJsaWMgbG9nZ2VyOiBMb2dnZXI7XG4gIHB1YmxpYyBzZWNyZXQ6IHN0cmluZzsgLy8gcHJhZ21hOiBhbGxvd2xpc3Qgc2VjcmV0XG4gIHB1YmxpYyBwbHVnaW5zOiBJUGx1Z2luQXV0aDxDb25maWc+W107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5zZWNyZXQgPSBjb25maWcuc2VjcmV0O1xuICAgIHRoaXMucGx1Z2lucyA9IHRoaXMuX2xvYWRQbHVnaW4oY29uZmlnKTtcbiAgICB0aGlzLl9hcHBseURlZmF1bHRQbHVnaW5zKCk7XG4gIH1cblxuICBwcml2YXRlIF9sb2FkUGx1Z2luKGNvbmZpZzogQ29uZmlnKTogSVBsdWdpbkF1dGg8Q29uZmlnPltdIHtcbiAgICBjb25zdCBwbHVnaW5PcHRpb25zID0ge1xuICAgICAgY29uZmlnLFxuICAgICAgbG9nZ2VyOiB0aGlzLmxvZ2dlcixcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxvYWRQbHVnaW48SVBsdWdpbkF1dGg8Q29uZmlnPj4oXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcuYXV0aCxcbiAgICAgIHBsdWdpbk9wdGlvbnMsXG4gICAgICAocGx1Z2luOiBJUGx1Z2luQXV0aDxDb25maWc+KTogYm9vbGVhbiA9PiB7XG4gICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRlLCBhbGxvd19hY2Nlc3MsIGFsbG93X3B1Ymxpc2ggfSA9IHBsdWdpbjtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gYXV0aGVudGljYXRlIHx8IGFsbG93X2FjY2VzcyB8fCBhbGxvd19wdWJsaXNoO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIF9hcHBseURlZmF1bHRQbHVnaW5zKCk6IHZvaWQge1xuICAgIHRoaXMucGx1Z2lucy5wdXNoKGdldERlZmF1bHRQbHVnaW5zKHRoaXMubG9nZ2VyKSk7XG4gIH1cblxuICBwdWJsaWMgY2hhbmdlUGFzc3dvcmQoXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nLCAvLyBwcmFnbWE6IGFsbG93bGlzdCBzZWNyZXRcbiAgICBuZXdQYXNzd29yZDogc3RyaW5nLCAvLyBwcmFnbWE6IGFsbG93bGlzdCBzZWNyZXRcbiAgICBjYjogQ2FsbGJhY2tcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgdmFsaWRQbHVnaW5zID0gXy5maWx0ZXIodGhpcy5wbHVnaW5zLCAocGx1Z2luKSA9PiBfLmlzRnVuY3Rpb24ocGx1Z2luLmNoYW5nZVBhc3N3b3JkKSk7XG5cbiAgICBpZiAoXy5pc0VtcHR5KHZhbGlkUGx1Z2lucykpIHtcbiAgICAgIHJldHVybiBjYihFcnJvckNvZGUuZ2V0SW50ZXJuYWxFcnJvcihTVVBQT1JUX0VSUk9SUy5QTFVHSU5fTUlTU0lOR19JTlRFUkZBQ0UpKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiB2YWxpZFBsdWdpbnMpIHtcbiAgICAgIGlmIChfLmlzTmlsKHBsdWdpbikgfHwgXy5pc0Z1bmN0aW9uKHBsdWdpbi5jaGFuZ2VQYXNzd29yZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlYnVnKCdhdXRoIHBsdWdpbiBkb2VzIG5vdCBpbXBsZW1lbnQgY2hhbmdlUGFzc3dvcmQsIHRyeWluZyBuZXh0IG9uZScpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCd1cGRhdGluZyBwYXNzd29yZCBmb3IgJW8nLCB1c2VybmFtZSk7XG4gICAgICAgIHBsdWdpbi5jaGFuZ2VQYXNzd29yZCEodXNlcm5hbWUsIHBhc3N3b3JkLCBuZXdQYXNzd29yZCwgKGVyciwgcHJvZmlsZSk6IHZvaWQgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICB7IHVzZXJuYW1lLCBlcnIgfSxcbiAgICAgICAgICAgICAgYEFuIGVycm9yIGhhcyBiZWVuIHByb2R1Y2VkXG4gICAgICAgICAgICB1cGRhdGluZyB0aGUgcGFzc3dvcmQgZm9yIEB7dXNlcm5hbWV9LiBFcnJvcjogQHtlcnIubWVzc2FnZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oeyB1c2VybmFtZSB9LCAndXBkYXRlZCBwYXNzd29yZCBmb3IgQHt1c2VybmFtZX0gd2FzIHN1Y2Nlc3NmdWwnKTtcbiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcHJvZmlsZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhdXRoZW50aWNhdGUodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgY2I6IENhbGxiYWNrKTogdm9pZCB7XG4gICAgY29uc3QgcGx1Z2lucyA9IHRoaXMucGx1Z2lucy5zbGljZSgwKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAoZnVuY3Rpb24gbmV4dCgpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnMuc2hpZnQoKSBhcyBJUGx1Z2luQXV0aDxDb25maWc+O1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihwbHVnaW4uYXV0aGVudGljYXRlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH1cbiAgICAgIGRlYnVnKCdhdXRoZW50aWNhdGluZyAlbycsIHVzZXJuYW1lKTtcbiAgICAgIHBsdWdpbi5hdXRoZW50aWNhdGUodXNlcm5hbWUsIHBhc3N3b3JkLCBmdW5jdGlvbiAoZXJyLCBncm91cHMpOiB2b2lkIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgeyB1c2VybmFtZSwgZXJyIH0sXG4gICAgICAgICAgICAnYXV0aGVudGljYXRpbmcgZm9yIHVzZXIgQHt1c2VybmFtZX0gZmFpbGVkLiBFcnJvcjogQHtlcnIubWVzc2FnZX0nXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4cGVjdDogU0tJUCBpZiBncm91cHMgaXMgZmFsc2V5IGFuZCBub3QgYW4gYXJyYXlcbiAgICAgICAgLy8gICAgICAgICB3aXRoIGF0IGxlYXN0IG9uZSBpdGVtICh0cnV0aHkgbGVuZ3RoKVxuICAgICAgICAvLyBFeHBlY3Q6IENPTlRJTlVFIG90aGVyd2lzZSAod2lsbCBlcnJvciBpZiBncm91cHMgaXMgbm90XG4gICAgICAgIC8vICAgICAgICAgYW4gYXJyYXksIGJ1dCB0aGlzIGlzIGN1cnJlbnQgYmVoYXZpb3IpXG4gICAgICAgIC8vIENhdmVhdDogU1RSSU5HIChpZiB2YWxpZCkgd2lsbCBwYXNzIHN1Y2Nlc3NmdWxseVxuICAgICAgICAvLyAgICAgICAgIGJ1ZyBnaXZlIHVuZXhwZWN0ZWQgcmVzdWx0c1xuICAgICAgICAvLyBJbmZvOiBDYW5ub3QgdXNlIGA9PSBmYWxzZSB0byBjaGVjayBmYWxzZXkgdmFsdWVzYFxuICAgICAgICBpZiAoISFncm91cHMgJiYgZ3JvdXBzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIC8vIFRPRE86IGNyZWF0ZSBhIGJldHRlciB1bmRlcnN0YW5kaW5nIG9mIGV4cGVjdGF0aW9uc1xuICAgICAgICAgIGlmIChfLmlzU3RyaW5nKGdyb3VwcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BsdWdpbiBncm91cCBlcnJvcjogaW52YWxpZCB0eXBlIGZvciBmdW5jdGlvbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpc0dyb3VwVmFsaWQ6IGJvb2xlYW4gPSBfLmlzQXJyYXkoZ3JvdXBzKTtcbiAgICAgICAgICBpZiAoIWlzR3JvdXBWYWxpZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihBUElfRVJST1IuQkFEX0ZPUk1BVF9VU0VSX0dST1VQKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVidWcoJ2F1dGhlbnRpY2F0aW9uIGZvciB1c2VyICVvIHdhcyBzdWNjZXNzZnVsbHkuIEdyb3VwczogJW8nLCB1c2VybmFtZSwgZ3JvdXBzKTtcbiAgICAgICAgICByZXR1cm4gY2IoZXJyLCBjcmVhdGVSZW1vdGVVc2VyKHVzZXJuYW1lLCBncm91cHMpKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcHVibGljIGFkZF91c2VyKHVzZXI6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgY2I6IENhbGxiYWNrKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgcGx1Z2lucyA9IHRoaXMucGx1Z2lucy5zbGljZSgwKTtcbiAgICBkZWJ1ZygnYWRkIHVzZXIgJW8nLCB1c2VyKTtcbiAgICAoZnVuY3Rpb24gbmV4dCgpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnMuc2hpZnQoKSBhcyBJUGx1Z2luQXV0aDxDb25maWc+O1xuICAgICAgbGV0IG1ldGhvZCA9ICdhZGR1c2VyJztcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ocGx1Z2luW21ldGhvZF0pID09PSBmYWxzZSkge1xuICAgICAgICBtZXRob2QgPSAnYWRkX3VzZXInO1xuICAgICAgICBzZWxmLmxvZ2dlci53YXJuKFxuICAgICAgICAgICd0aGUgcGx1Z2luIG1ldGhvZCBhZGRfdXNlciBpbiB0aGUgYXV0aCBwbHVnaW4gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgcmVsZWFzZSwgbm90aWZ5IHRvIHRoZSBwbHVnaW4gYXV0aG9yJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKHBsdWdpblttZXRob2RdKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcC5hZGRfdXNlcigpIGV4ZWN1dGlvblxuICAgICAgICBwbHVnaW5bbWV0aG9kXSh1c2VyLCBwYXNzd29yZCwgZnVuY3Rpb24gKGVyciwgb2spOiB2b2lkIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgeyB1c2VyLCBlcnI6IGVyci5tZXNzYWdlIH0sXG4gICAgICAgICAgICAgICd0aGUgdXNlciBAe3VzZXJ9IGNvdWxkIG5vdCBiZWluZyBhZGRlZC4gRXJyb3I6IEB7ZXJyfSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKHsgdXNlciB9LCAndGhlIHVzZXIgQHt1c2VyfSBoYXMgYmVlbiBhZGRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuYXV0aGVudGljYXRlKHVzZXIsIHBhc3N3b3JkLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvdyB1c2VyIHRvIGFjY2VzcyBhIHBhY2thZ2UuXG4gICAqL1xuICBwdWJsaWMgYWxsb3dfYWNjZXNzKFxuICAgIHsgcGFja2FnZU5hbWUsIHBhY2thZ2VWZXJzaW9uIH06IEF1dGhQbHVnaW5QYWNrYWdlLFxuICAgIHVzZXI6IFJlbW90ZVVzZXIsXG4gICAgY2FsbGJhY2s6IENhbGxiYWNrXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHBsdWdpbnMgPSB0aGlzLnBsdWdpbnMuc2xpY2UoMCk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgcGtnQWxsb3dBY2NlczogQWxsb3dBY2Nlc3MgPSB7IG5hbWU6IHBhY2thZ2VOYW1lLCB2ZXJzaW9uOiBwYWNrYWdlVmVyc2lvbiB9O1xuICAgIGNvbnN0IHBrZyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHBrZ0FsbG93QWNjZXMsXG4gICAgICBnZXRNYXRjaGVkUGFja2FnZXNTcGVjKHBhY2thZ2VOYW1lLCB0aGlzLmNvbmZpZy5wYWNrYWdlcylcbiAgICApIGFzIEFsbG93QWNjZXNzICYgUGFja2FnZUFjY2VzcztcbiAgICBkZWJ1ZygnYWxsb3cgYWNjZXNzIGZvciAlbycsIHBhY2thZ2VOYW1lKTtcblxuICAgIChmdW5jdGlvbiBuZXh0KCk6IHZvaWQge1xuICAgICAgY29uc3QgcGx1Z2luOiBJUGx1Z2luQXV0aDxDb25maWc+ID0gcGx1Z2lucy5zaGlmdCgpIGFzIElQbHVnaW5BdXRoPENvbmZpZz47XG5cbiAgICAgIGlmIChfLmlzTmlsKHBsdWdpbikgfHwgXy5pc0Z1bmN0aW9uKHBsdWdpbi5hbGxvd19hY2Nlc3MpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBwbHVnaW4uYWxsb3dfYWNjZXNzISh1c2VyLCBwa2csIGZ1bmN0aW9uIChlcnIsIG9rOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgIHsgcGFja2FnZU5hbWUsIGVyciB9LFxuICAgICAgICAgICAgJ2ZvcmJpZGRlbiBhY2Nlc3MgZm9yIEB7cGFja2FnZU5hbWV9LiBFcnJvcjogQHtlcnIubWVzc2FnZX0nXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oeyBwYWNrYWdlTmFtZSB9LCAnYWxsb3dlZCBhY2Nlc3MgZm9yIEB7cGFja2FnZU5hbWV9Jyk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG9rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoKTsgLy8gY2IobnVsbCwgZmFsc2UpIGNhdXNlcyBuZXh0IHBsdWdpbiB0byByb2xsXG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcHVibGljIGFsbG93X3VucHVibGlzaChcbiAgICB7IHBhY2thZ2VOYW1lLCBwYWNrYWdlVmVyc2lvbiB9OiBBdXRoUGx1Z2luUGFja2FnZSxcbiAgICB1c2VyOiBSZW1vdGVVc2VyLFxuICAgIGNhbGxiYWNrOiBDYWxsYmFja1xuICApOiB2b2lkIHtcbiAgICBjb25zdCBwa2cgPSBPYmplY3QuYXNzaWduKFxuICAgICAgeyBuYW1lOiBwYWNrYWdlTmFtZSwgdmVyc2lvbjogcGFja2FnZVZlcnNpb24gfSxcbiAgICAgIGdldE1hdGNoZWRQYWNrYWdlc1NwZWMocGFja2FnZU5hbWUsIHRoaXMuY29uZmlnLnBhY2thZ2VzKVxuICAgICk7XG4gICAgZGVidWcoJ2FsbG93IHVucHVibGlzaCBmb3IgJW8nLCBwYWNrYWdlTmFtZSk7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICBpZiAoXy5pc05pbChwbHVnaW4pIHx8IF8uaXNGdW5jdGlvbihwbHVnaW4uYWxsb3dfdW5wdWJsaXNoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVidWcoJ2FsbG93IHVucHVibGlzaCBmb3IgJW8gcGx1Z2luIGRvZXMgbm90IGltcGxlbWVudCBhbGxvd191bnB1Ymxpc2gnLCBwYWNrYWdlTmFtZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2luLmFsbG93X3VucHVibGlzaCEodXNlciwgcGtnLCAoZXJyLCBvazogYm9vbGVhbik6IHZvaWQgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICB7IHBhY2thZ2VOYW1lLCB1c2VyOiB1c2VyPy5uYW1lIH0sXG4gICAgICAgICAgICAgICdAe3VzZXJ9IGZvcmJpZGRlbiBwdWJsaXNoIGZvciBAe3BhY2thZ2VOYW1lfSwgaXQgd2lsbCBmYWxsYmFjayBvbiB1bnB1Ymxpc2ggcGVybWlzc2lvbnMnXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF8uaXNOaWwob2spID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkZWJ1Zygnd2UgYnlwYXNzIHVucHVibGlzaCBmb3IgJW8sIHB1Ymxpc2ggd2lsbCBoYW5kbGUgdGhlIGFjY2VzcycsIHBhY2thZ2VOYW1lKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsb3dfcHVibGlzaCguLi5hcmd1bWVudHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvaykge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgICAgICAgICAgeyBwYWNrYWdlTmFtZSwgdXNlcjogdXNlcj8ubmFtZSB9LFxuICAgICAgICAgICAgICAnQHt1c2VyfSBhbGxvd2VkIHVucHVibGlzaCBmb3IgQHtwYWNrYWdlTmFtZX0nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG9rKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvdyB1c2VyIHRvIHB1Ymxpc2ggYSBwYWNrYWdlLlxuICAgKi9cbiAgcHVibGljIGFsbG93X3B1Ymxpc2goXG4gICAgeyBwYWNrYWdlTmFtZSwgcGFja2FnZVZlcnNpb24gfTogQXV0aFBsdWdpblBhY2thZ2UsXG4gICAgdXNlcjogUmVtb3RlVXNlcixcbiAgICBjYWxsYmFjazogQ2FsbGJhY2tcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgcGx1Z2lucyA9IHRoaXMucGx1Z2lucy5zbGljZSgwKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBwa2cgPSBPYmplY3QuYXNzaWduKFxuICAgICAgeyBuYW1lOiBwYWNrYWdlTmFtZSwgdmVyc2lvbjogcGFja2FnZVZlcnNpb24gfSxcbiAgICAgIGdldE1hdGNoZWRQYWNrYWdlc1NwZWMocGFja2FnZU5hbWUsIHRoaXMuY29uZmlnLnBhY2thZ2VzKVxuICAgICk7XG4gICAgZGVidWcoJ2FsbG93IHB1Ymxpc2ggZm9yICVvIGluaXQgfCBwbHVnaW5zOiAlbycsIHBhY2thZ2VOYW1lLCBwbHVnaW5zKTtcbiAgICAoZnVuY3Rpb24gbmV4dCgpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnMuc2hpZnQoKTtcblxuICAgICAgaWYgKF8uaXNOaWwocGx1Z2luKSB8fCBfLmlzRnVuY3Rpb24ocGx1Z2luLmFsbG93X3B1Ymxpc2gpID09PSBmYWxzZSkge1xuICAgICAgICBkZWJ1ZygnYWxsb3cgcHVibGlzaCBmb3IgJW8gcGx1Z2luIGRvZXMgbm90IGltcGxlbWVudCBhbGxvd19wdWJsaXNoJywgcGFja2FnZU5hbWUpO1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBwbHVnaW4uYWxsb3dfcHVibGlzaCh1c2VyLCBwa2csIChlcnI6IGFueSwgb2s6IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKF8uaXNOaWwoZXJyKSA9PT0gZmFsc2UgJiYgXy5pc0Vycm9yKGVycikpIHtcbiAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgIHsgcGFja2FnZU5hbWUsIHVzZXI6IHVzZXI/Lm5hbWUgfSxcbiAgICAgICAgICAgICdAe3VzZXJ9IGlzIGZvcmJpZGRlbiBwdWJsaXNoIGZvciBAe3BhY2thZ2VOYW1lfSdcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhcbiAgICAgICAgICAgIHsgcGFja2FnZU5hbWUsIHVzZXI6IHVzZXI/Lm5hbWUgfSxcbiAgICAgICAgICAgICdAe3VzZXJ9IGlzIGFsbG93ZWQgcHVibGlzaCBmb3IgQHtwYWNrYWdlTmFtZX0nXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgb2spO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnKCdhbGxvdyBwdWJsaXNoIHNraXAgdmFsaWRhdGlvbiBmb3IgJW8nLCBwYWNrYWdlTmFtZSk7XG4gICAgICAgIG5leHQoKTsgLy8gY2IobnVsbCwgZmFsc2UpIGNhdXNlcyBuZXh0IHBsdWdpbiB0byByb2xsXG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcHVibGljIGFwaUpXVG1pZGRsZXdhcmUoKTogRnVuY3Rpb24ge1xuICAgIGNvbnN0IHBsdWdpbnMgPSB0aGlzLnBsdWdpbnMuc2xpY2UoMCk7XG4gICAgY29uc3QgaGVscGVycyA9IHsgY3JlYXRlQW5vbnltb3VzUmVtb3RlVXNlciwgY3JlYXRlUmVtb3RlVXNlciB9O1xuICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpIHtcbiAgICAgIGlmIChwbHVnaW4uYXBpSldUbWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gcGx1Z2luLmFwaUpXVG1pZGRsZXdhcmUoaGVscGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgX25leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQgPT4ge1xuICAgICAgcmVxLnBhdXNlKCk7XG5cbiAgICAgIGNvbnN0IG5leHQgPSBmdW5jdGlvbiAoZXJyOiBhbnkgfCB2b2lkKTogdm9pZCB7XG4gICAgICAgIHJlcS5yZXN1bWUoKTtcbiAgICAgICAgLy8gdW5jb21tZW50IHRoaXMgdG8gcmVqZWN0IHVzZXJzIHdpdGggYmFkIGF1dGggaGVhZGVyc1xuICAgICAgICAvLyByZXR1cm4gX25leHQuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgICAgICAvLyBzd2FsbG93IGVycm9yLCB1c2VyIHJlbWFpbnMgdW5hdXRob3JpemVkXG4gICAgICAgIC8vIHNldCByZW1vdGVVc2VyRXJyb3IgdG8gaW5kaWNhdGUgdGhhdCB1c2VyIHdhcyBhdHRlbXB0aW5nIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXEucmVtb3RlX3VzZXIuZXJyb3IgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX25leHQoKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLl9pc1JlbW90ZVVzZXJWYWxpZChyZXEucmVtb3RlX3VzZXIpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gaW4gY2FzZSBhdXRoIGhlYWRlciBkb2VzIG5vdCBleGlzdCB3ZSByZXR1cm4gYW5vbnltb3VzIGZ1bmN0aW9uXG4gICAgICByZXEucmVtb3RlX3VzZXIgPSBjcmVhdGVBbm9ueW1vdXNSZW1vdGVVc2VyKCk7XG5cbiAgICAgIGNvbnN0IHsgYXV0aG9yaXphdGlvbiB9ID0gcmVxLmhlYWRlcnM7XG4gICAgICBpZiAoXy5pc05pbChhdXRob3JpemF0aW9uKSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNBdXRoSGVhZGVyVmFsaWQoYXV0aG9yaXphdGlvbikpIHtcbiAgICAgICAgZGVidWcoJ2FwaSBtaWRkbGV3YXJlIGF1dGggaGVhdGhlciBpcyBub3QgdmFsaWQnKTtcbiAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldEJhZFJlcXVlc3QoQVBJX0VSUk9SLkJBRF9BVVRIX0hFQURFUikpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzZWN1cml0eTogU2VjdXJpdHkgPSBnZXRTZWN1cml0eSh0aGlzLmNvbmZpZyk7XG4gICAgICBjb25zdCB7IHNlY3JldCB9ID0gdGhpcy5jb25maWc7XG5cbiAgICAgIGlmIChpc0FFU0xlZ2FjeShzZWN1cml0eSkpIHtcbiAgICAgICAgZGVidWcoJ2FwaSBtaWRkbGV3YXJlIHVzaW5nIGxlZ2FjeSBhdXRoIHRva2VuJyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZUFFU01pZGRsZXdhcmUocmVxLCBzZWN1cml0eSwgc2VjcmV0LCBhdXRob3JpemF0aW9uLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdhcGkgbWlkZGxld2FyZSB1c2luZyBKV1QgYXV0aCB0b2tlbicpO1xuICAgICAgICB0aGlzLl9oYW5kbGVKV1RBUElNaWRkbGV3YXJlKHJlcSwgc2VjdXJpdHksIHNlY3JldCwgYXV0aG9yaXphdGlvbiwgbmV4dCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgX2hhbmRsZUpXVEFQSU1pZGRsZXdhcmUoXG4gICAgcmVxOiAkUmVxdWVzdEV4dGVuZCxcbiAgICBzZWN1cml0eTogU2VjdXJpdHksXG4gICAgc2VjcmV0OiBzdHJpbmcsXG4gICAgYXV0aG9yaXphdGlvbjogc3RyaW5nLFxuICAgIG5leHQ6IEZ1bmN0aW9uXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2NoZW1lLCB0b2tlbiB9ID0gcGFyc2VBdXRoVG9rZW5IZWFkZXIoYXV0aG9yaXphdGlvbik7XG4gICAgaWYgKHNjaGVtZS50b1VwcGVyQ2FzZSgpID09PSBUT0tFTl9CQVNJQy50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAvLyB0aGlzIHNob3VsZCBoYXBwZW4gd2hlbiBjbGllbnQgdHJpZXMgdG8gbG9naW4gd2l0aCBhbiBleGlzdGluZyB1c2VyXG4gICAgICBjb25zdCBjcmVkZW50aWFscyA9IGNvbnZlcnRQYXlsb2FkVG9CYXNlNjQodG9rZW4pLnRvU3RyaW5nKCk7XG4gICAgICBjb25zdCB7IHVzZXIsIHBhc3N3b3JkIH0gPSBwYXJzZUJhc2ljUGF5bG9hZChjcmVkZW50aWFscykgYXMgQUVTUGF5bG9hZDtcbiAgICAgIHRoaXMuYXV0aGVudGljYXRlKHVzZXIsIHBhc3N3b3JkLCAoZXJyLCB1c2VyKTogdm9pZCA9PiB7XG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgcmVxLnJlbW90ZV91c2VyID0gdXNlcjtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVxLnJlbW90ZV91c2VyID0gY3JlYXRlQW5vbnltb3VzUmVtb3RlVXNlcigpO1xuICAgICAgICAgIG5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGp3dCBoYW5kbGVyXG4gICAgICBjb25zdCBjcmVkZW50aWFsczogYW55ID0gZ2V0TWlkZGxld2FyZUNyZWRlbnRpYWxzKHNlY3VyaXR5LCBzZWNyZXQsIGF1dGhvcml6YXRpb24pO1xuICAgICAgaWYgKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIC8vIGlmIHRoZSBzaWduYXR1cmUgaXMgdmFsaWQgd2UgcmVseSBvbiBpdFxuICAgICAgICByZXEucmVtb3RlX3VzZXIgPSBjcmVkZW50aWFscztcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2l0aCBKV1QgdGhyb3cgNDAxXG4gICAgICAgIG5leHQoRXJyb3JDb2RlLmdldEZvcmJpZGRlbihBUElfRVJST1IuQkFEX1VTRVJOQU1FX1BBU1NXT1JEKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfaGFuZGxlQUVTTWlkZGxld2FyZShcbiAgICByZXE6ICRSZXF1ZXN0RXh0ZW5kLFxuICAgIHNlY3VyaXR5OiBTZWN1cml0eSxcbiAgICBzZWNyZXQ6IHN0cmluZyxcbiAgICBhdXRob3JpemF0aW9uOiBzdHJpbmcsXG4gICAgbmV4dDogRnVuY3Rpb25cbiAgKTogdm9pZCB7XG4gICAgY29uc3QgY3JlZGVudGlhbHM6IGFueSA9IGdldE1pZGRsZXdhcmVDcmVkZW50aWFscyhzZWN1cml0eSwgc2VjcmV0LCBhdXRob3JpemF0aW9uKTtcbiAgICBpZiAoY3JlZGVudGlhbHMpIHtcbiAgICAgIGNvbnN0IHsgdXNlciwgcGFzc3dvcmQgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgdGhpcy5hdXRoZW50aWNhdGUodXNlciwgcGFzc3dvcmQsIChlcnIsIHVzZXIpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICByZXEucmVtb3RlX3VzZXIgPSB1c2VyO1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXEucmVtb3RlX3VzZXIgPSBjcmVhdGVBbm9ueW1vdXNSZW1vdGVVc2VyKCk7XG4gICAgICAgICAgbmV4dChlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgZm9yY2UgbnBtIGNsaWVudCB0byBhc2sgYWdhaW4gd2l0aCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldEJhZFJlcXVlc3QoQVBJX0VSUk9SLkJBRF9BVVRIX0hFQURFUikpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2lzUmVtb3RlVXNlclZhbGlkKHJlbW90ZV91c2VyOiBSZW1vdGVVc2VyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIF8uaXNVbmRlZmluZWQocmVtb3RlX3VzZXIpID09PSBmYWxzZSAmJiBfLmlzVW5kZWZpbmVkKHJlbW90ZV91c2VyLm5hbWUpID09PSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBKV1QgbWlkZGxld2FyZSBmb3IgV2ViVUlcbiAgICovXG4gIHB1YmxpYyB3ZWJVSUpXVG1pZGRsZXdhcmUoKTogRnVuY3Rpb24ge1xuICAgIHJldHVybiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIF9uZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1JlbW90ZVVzZXJWYWxpZChyZXEucmVtb3RlX3VzZXIpKSB7XG4gICAgICAgIHJldHVybiBfbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICByZXEucGF1c2UoKTtcbiAgICAgIGNvbnN0IG5leHQgPSAoZXJyOiBhbnkgfCB2b2lkKTogdm9pZCA9PiB7XG4gICAgICAgIHJlcS5yZXN1bWUoKTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIC8vIHJlcS5yZW1vdGVfdXNlci5lcnJvciA9IGVyci5tZXNzYWdlO1xuICAgICAgICAgIHJlcy5zdGF0dXMoZXJyLnN0YXR1c0NvZGUpLnNlbmQoZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9uZXh0KCk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IGF1dGhvcml6YXRpb24gfSA9IHJlcS5oZWFkZXJzO1xuICAgICAgaWYgKF8uaXNOaWwoYXV0aG9yaXphdGlvbikpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQXV0aEhlYWRlclZhbGlkKGF1dGhvcml6YXRpb24pKSB7XG4gICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRCYWRSZXF1ZXN0KEFQSV9FUlJPUi5CQURfQVVUSF9IRUFERVIpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9rZW4gPSAoYXV0aG9yaXphdGlvbiB8fCAnJykucmVwbGFjZShgJHtUT0tFTl9CRUFSRVJ9IGAsICcnKTtcbiAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBsZXQgY3JlZGVudGlhbHM7XG4gICAgICB0cnkge1xuICAgICAgICBjcmVkZW50aWFscyA9IHZlcmlmeUpXVFBheWxvYWQodG9rZW4sIHRoaXMuY29uZmlnLnNlY3JldCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gRklYTUU6IGludGVuZGVkIGJlaGF2aW91ciwgZG8gd2Ugd2FudCBpdD9cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzUmVtb3RlVXNlclZhbGlkKGNyZWRlbnRpYWxzKSkge1xuICAgICAgICBjb25zdCB7IG5hbWUsIGdyb3VwcyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgIHJlcS5yZW1vdGVfdXNlciA9IGNyZWF0ZVJlbW90ZVVzZXIobmFtZSwgZ3JvdXBzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcS5yZW1vdGVfdXNlciA9IGNyZWF0ZUFub255bW91c1JlbW90ZVVzZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIG5leHQoKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGp3dEVuY3J5cHQodXNlcjogUmVtb3RlVXNlciwgc2lnbk9wdGlvbnM6IEpXVFNpZ25PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB7IHJlYWxfZ3JvdXBzLCBuYW1lLCBncm91cHMgfSA9IHVzZXI7XG4gICAgY29uc3QgcmVhbEdyb3Vwc1ZhbGlkYXRlZCA9IF8uaXNOaWwocmVhbF9ncm91cHMpID8gW10gOiByZWFsX2dyb3VwcztcbiAgICBjb25zdCBncm91cGVkR3JvdXBzID0gXy5pc05pbChncm91cHMpXG4gICAgICA/IHJlYWxfZ3JvdXBzXG4gICAgICA6IEFycmF5LmZyb20obmV3IFNldChbLi4uZ3JvdXBzLmNvbmNhdChyZWFsR3JvdXBzVmFsaWRhdGVkKV0pKTtcbiAgICBjb25zdCBwYXlsb2FkOiBSZW1vdGVVc2VyID0ge1xuICAgICAgcmVhbF9ncm91cHM6IHJlYWxHcm91cHNWYWxpZGF0ZWQsXG4gICAgICBuYW1lLFxuICAgICAgZ3JvdXBzOiBncm91cGVkR3JvdXBzLFxuICAgIH07XG5cbiAgICBjb25zdCB0b2tlbjogc3RyaW5nID0gYXdhaXQgc2lnblBheWxvYWQocGF5bG9hZCwgdGhpcy5zZWNyZXQsIHNpZ25PcHRpb25zKTtcblxuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNyeXB0IGEgc3RyaW5nLlxuICAgKi9cbiAgcHVibGljIGFlc0VuY3J5cHQoYnVmOiBCdWZmZXIpOiBCdWZmZXIge1xuICAgIHJldHVybiBhZXNFbmNyeXB0KGJ1ZiwgdGhpcy5zZWNyZXQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGg7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUE7QUFjQTtBQUVBO0FBRUE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUE0RDtBQUFBO0FBQUE7QUFBQTtBQUU1RCxNQUFNQSxLQUFLLEdBQUcsSUFBQUMsY0FBVSxFQUFDLGdCQUFnQixDQUFDO0FBRTFDLE1BQU1DLElBQUksQ0FBa0I7RUFHSDs7RUFHaEJDLFdBQVcsQ0FBQ0MsTUFBYyxFQUFFO0lBQUE7SUFBQTtJQUFBO0lBQUE7SUFDakMsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLGNBQU07SUFDcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0UsTUFBTTtJQUMzQixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0osTUFBTSxDQUFDO0lBQ3ZDLElBQUksQ0FBQ0ssb0JBQW9CLEVBQUU7RUFDN0I7RUFFUUQsV0FBVyxDQUFDSixNQUFjLEVBQXlCO0lBQ3pELE1BQU1NLGFBQWEsR0FBRztNQUNwQk4sTUFBTTtNQUNOQyxNQUFNLEVBQUUsSUFBSSxDQUFDQTtJQUNm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