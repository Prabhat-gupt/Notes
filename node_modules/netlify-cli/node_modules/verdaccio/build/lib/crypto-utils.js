"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aesDecrypt = aesDecrypt;
exports.aesEncrypt = aesEncrypt;
exports.defaultTarballHashAlgorithm = exports.defaultAlgorithm = void 0;
exports.signPayload = signPayload;
exports.verifyPayload = verifyPayload;
var _crypto = require("crypto");
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const defaultAlgorithm = 'aes192';
exports.defaultAlgorithm = defaultAlgorithm;
const defaultTarballHashAlgorithm = 'sha1';
exports.defaultTarballHashAlgorithm = defaultTarballHashAlgorithm;
function aesEncrypt(buf, secret) {
  // deprecated (it will be migrated in Verdaccio 5), it is a breaking change
  // https://nodejs.org/api/crypto.html#crypto_crypto_createcipher_algorithm_password_options
  // https://www.grainger.xyz/changing-from-cipher-to-cipheriv/
  const c = (0, _crypto.createCipher)(defaultAlgorithm, secret);
  const b1 = c.update(buf);
  const b2 = c.final();
  return Buffer.concat([b1, b2]);
}
function aesDecrypt(buf, secret) {
  try {
    // deprecated (it will be migrated in Verdaccio 5), it is a breaking change
    // https://nodejs.org/api/crypto.html#crypto_crypto_createdecipher_algorithm_password_options
    // https://www.grainger.xyz/changing-from-cipher-to-cipheriv/
    const c = (0, _crypto.createDecipher)(defaultAlgorithm, secret);
    const b1 = c.update(buf);
    const b2 = c.final();
    return Buffer.concat([b1, b2]);
  } catch (_) {
    return Buffer.alloc(0);
  }
}
async function signPayload(payload, secretOrPrivateKey, options) {
  return new Promise(function (resolve, reject) {
    return _jsonwebtoken.default.sign(payload, secretOrPrivateKey, _objectSpread({
      notBefore: '1'
    }, options), (error, token) => error ? reject(error) : resolve(token));
  });
}
function verifyPayload(token, secretOrPrivateKey) {
  return _jsonwebtoken.default.verify(token, secretOrPrivateKey);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0QWxnb3JpdGhtIiwiZGVmYXVsdFRhcmJhbGxIYXNoQWxnb3JpdGhtIiwiYWVzRW5jcnlwdCIsImJ1ZiIsInNlY3JldCIsImMiLCJjcmVhdGVDaXBoZXIiLCJiMSIsInVwZGF0ZSIsImIyIiwiZmluYWwiLCJCdWZmZXIiLCJjb25jYXQiLCJhZXNEZWNyeXB0IiwiY3JlYXRlRGVjaXBoZXIiLCJfIiwiYWxsb2MiLCJzaWduUGF5bG9hZCIsInBheWxvYWQiLCJzZWNyZXRPclByaXZhdGVLZXkiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJqd3QiLCJzaWduIiwibm90QmVmb3JlIiwiZXJyb3IiLCJ0b2tlbiIsInZlcmlmeVBheWxvYWQiLCJ2ZXJpZnkiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2NyeXB0by11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNoLCBjcmVhdGVDaXBoZXIsIGNyZWF0ZURlY2lwaGVyLCBjcmVhdGVIYXNoLCBwc2V1ZG9SYW5kb21CeXRlcyB9IGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5cbmltcG9ydCB7IEpXVFNpZ25PcHRpb25zLCBSZW1vdGVVc2VyIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0QWxnb3JpdGhtID0gJ2FlczE5Mic7XG5leHBvcnQgY29uc3QgZGVmYXVsdFRhcmJhbGxIYXNoQWxnb3JpdGhtID0gJ3NoYTEnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWVzRW5jcnlwdChidWY6IEJ1ZmZlciwgc2VjcmV0OiBzdHJpbmcpOiBCdWZmZXIge1xuICAvLyBkZXByZWNhdGVkIChpdCB3aWxsIGJlIG1pZ3JhdGVkIGluIFZlcmRhY2NpbyA1KSwgaXQgaXMgYSBicmVha2luZyBjaGFuZ2VcbiAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jcnlwdG8uaHRtbCNjcnlwdG9fY3J5cHRvX2NyZWF0ZWNpcGhlcl9hbGdvcml0aG1fcGFzc3dvcmRfb3B0aW9uc1xuICAvLyBodHRwczovL3d3dy5ncmFpbmdlci54eXovY2hhbmdpbmctZnJvbS1jaXBoZXItdG8tY2lwaGVyaXYvXG4gIGNvbnN0IGMgPSBjcmVhdGVDaXBoZXIoZGVmYXVsdEFsZ29yaXRobSwgc2VjcmV0KTtcbiAgY29uc3QgYjEgPSBjLnVwZGF0ZShidWYpO1xuICBjb25zdCBiMiA9IGMuZmluYWwoKTtcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2IxLCBiMl0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWVzRGVjcnlwdChidWY6IEJ1ZmZlciwgc2VjcmV0OiBzdHJpbmcpOiBCdWZmZXIge1xuICB0cnkge1xuICAgIC8vIGRlcHJlY2F0ZWQgKGl0IHdpbGwgYmUgbWlncmF0ZWQgaW4gVmVyZGFjY2lvIDUpLCBpdCBpcyBhIGJyZWFraW5nIGNoYW5nZVxuICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvY3J5cHRvLmh0bWwjY3J5cHRvX2NyeXB0b19jcmVhdGVkZWNpcGhlcl9hbGdvcml0aG1fcGFzc3dvcmRfb3B0aW9uc1xuICAgIC8vIGh0dHBzOi8vd3d3LmdyYWluZ2VyLnh5ei9jaGFuZ2luZy1mcm9tLWNpcGhlci10by1jaXBoZXJpdi9cbiAgICBjb25zdCBjID0gY3JlYXRlRGVjaXBoZXIoZGVmYXVsdEFsZ29yaXRobSwgc2VjcmV0KTtcbiAgICBjb25zdCBiMSA9IGMudXBkYXRlKGJ1Zik7XG4gICAgY29uc3QgYjIgPSBjLmZpbmFsKCk7XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2IxLCBiMl0pO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnblBheWxvYWQoXG4gIHBheWxvYWQ6IFJlbW90ZVVzZXIsXG4gIHNlY3JldE9yUHJpdmF0ZUtleTogc3RyaW5nLFxuICBvcHRpb25zOiBKV1RTaWduT3B0aW9uc1xuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBqd3Quc2lnbihcbiAgICAgIHBheWxvYWQsXG4gICAgICBzZWNyZXRPclByaXZhdGVLZXksXG4gICAgICB7XG4gICAgICAgIG5vdEJlZm9yZTogJzEnLCAvLyBNYWtlIHN1cmUgdGhlIHRpbWUgd2lsbCBub3Qgcm9sbGJhY2sgOilcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIH0sXG4gICAgICAoZXJyb3IsIHRva2VuKSA9PiAoZXJyb3IgPyByZWplY3QoZXJyb3IpIDogcmVzb2x2ZSh0b2tlbikpXG4gICAgKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlQYXlsb2FkKHRva2VuOiBzdHJpbmcsIHNlY3JldE9yUHJpdmF0ZUtleTogc3RyaW5nKTogUmVtb3RlVXNlciB7XG4gIHJldHVybiBqd3QudmVyaWZ5KHRva2VuLCBzZWNyZXRPclByaXZhdGVLZXkpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUErQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJeEIsTUFBTUEsZ0JBQWdCLEdBQUcsUUFBUTtBQUFDO0FBQ2xDLE1BQU1DLDJCQUEyQixHQUFHLE1BQU07QUFBQztBQUUzQyxTQUFTQyxVQUFVLENBQUNDLEdBQVcsRUFBRUMsTUFBYyxFQUFVO0VBQzlEO0VBQ0E7RUFDQTtFQUNBLE1BQU1DLENBQUMsR0FBRyxJQUFBQyxvQkFBWSxFQUFDTixnQkFBZ0IsRUFBRUksTUFBTSxDQUFDO0VBQ2hELE1BQU1HLEVBQUUsR0FBR0YsQ0FBQyxDQUFDRyxNQUFNLENBQUNMLEdBQUcsQ0FBQztFQUN4QixNQUFNTSxFQUFFLEdBQUdKLENBQUMsQ0FBQ0ssS0FBSyxFQUFFO0VBQ3BCLE9BQU9DLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUNMLEVBQUUsRUFBRUUsRUFBRSxDQUFDLENBQUM7QUFDaEM7QUFFTyxTQUFTSSxVQUFVLENBQUNWLEdBQVcsRUFBRUMsTUFBYyxFQUFVO0VBQzlELElBQUk7SUFDRjtJQUNBO0lBQ0E7SUFDQSxNQUFNQyxDQUFDLEdBQUcsSUFBQVMsc0JBQWMsRUFBQ2QsZ0JBQWdCLEVBQUVJLE1BQU0sQ0FBQztJQUNsRCxNQUFNRyxFQUFFLEdBQUdGLENBQUMsQ0FBQ0csTUFBTSxDQUFDTCxHQUFHLENBQUM7SUFDeEIsTUFBTU0sRUFBRSxHQUFHSixDQUFDLENBQUNLLEtBQUssRUFBRTtJQUNwQixPQUFPQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDTCxFQUFFLEVBQUVFLEVBQUUsQ0FBQyxDQUFDO0VBQ2hDLENBQUMsQ0FBQyxPQUFPTSxDQUFDLEVBQUU7SUFDVixPQUFPSixNQUFNLENBQUNLLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDeEI7QUFDRjtBQUVPLGVBQWVDLFdBQVcsQ0FDL0JDLE9BQW1CLEVBQ25CQyxrQkFBMEIsRUFDMUJDLE9BQXVCLEVBQ047RUFDakIsT0FBTyxJQUFJQyxPQUFPLENBQUMsVUFBVUMsT0FBTyxFQUFFQyxNQUFNLEVBQW1CO0lBQzdELE9BQU9DLHFCQUFHLENBQUNDLElBQUksQ0FDYlAsT0FBTyxFQUNQQyxrQkFBa0I7TUFFaEJPLFNBQVMsRUFBRTtJQUFHLEdBQ1hOLE9BQU8sR0FFWixDQUFDTyxLQUFLLEVBQUVDLEtBQUssS0FBTUQsS0FBSyxHQUFHSixNQUFNLENBQUNJLEtBQUssQ0FBQyxHQUFHTCxPQUFPLENBQUNNLEtBQUssQ0FBRSxDQUMzRDtFQUNILENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsYUFBYSxDQUFDRCxLQUFhLEVBQUVULGtCQUEwQixFQUFjO0VBQ25GLE9BQU9LLHFCQUFHLENBQUNNLE1BQU0sQ0FBQ0YsS0FBSyxFQUFFVCxrQkFBa0IsQ0FBQztBQUM5QyJ9