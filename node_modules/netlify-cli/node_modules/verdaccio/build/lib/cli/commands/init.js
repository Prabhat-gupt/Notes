"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitCommand = exports.DEFAULT_PROCESS_NAME = void 0;
var _clipanion = require("clipanion");
var _path = _interopRequireDefault(require("path"));
var _bootstrap = require("../../bootstrap");
var _configPath = _interopRequireDefault(require("../../config-path"));
var _utils = require("../../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
require('pkginfo')(module);
const pkgVersion = module.exports.version;
const pkgName = module.exports.name;
const DEFAULT_PROCESS_NAME = 'verdaccio';
exports.DEFAULT_PROCESS_NAME = DEFAULT_PROCESS_NAME;
const logger = require('../../logger');
class InitCommand extends _clipanion.Command {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "listen", _clipanion.Option.String('-l,--listen', {
      description: 'host:port number to listen on (default: localhost:4873)'
    }));
    _defineProperty(this, "config", _clipanion.Option.String('-c,--config', {
      description: 'use this configuration file (default: ./config.yaml)'
    }));
  }
  async execute() {
    let configPathLocation;
    try {
      configPathLocation = (0, _configPath.default)(this.config);
      const verdaccioConfiguration = (0, _utils.parseConfigFile)(configPathLocation);
      if (!verdaccioConfiguration.self_path) {
        verdaccioConfiguration.self_path = _path.default.resolve(configPathLocation);
      }
      if (!verdaccioConfiguration.https) {
        verdaccioConfiguration.https = {
          enable: false
        };
      }
      logger.logger.warn({
        file: configPathLocation
      }, 'config file  - @{file}');
      process.title = verdaccioConfiguration.web && verdaccioConfiguration.web.title || 'verdaccio';
      (0, _bootstrap.startVerdaccio)(verdaccioConfiguration, this.listen, configPathLocation, pkgVersion, pkgName, _bootstrap.listenDefaultCallback);
    } catch (err) {
      logger.logger.fatal({
        file: configPathLocation,
        err: err
      }, 'cannot open config file @{file}: @{!err.message}');
      process.exit(1);
    }
  }
}
exports.InitCommand = InitCommand;
_defineProperty(InitCommand, "paths", [_clipanion.Command.Default]);
_defineProperty(InitCommand, "usage", _clipanion.Command.Usage({
  description: `launch the server`,
  details: `
      This start the registry in the default port.

      When used without arguments, it:

      - bootstrap the server at the port  \`4873\`

      The optional arguments are:

      - \`--listen\` to switch the default server port,
      - \`--config\` to define a different configuration path location,

    `,
  examples: [[`Runs the server with the default configuration`, `verdaccio`], [`Runs the server in the port 5000`, `verdaccio --listen 5000`], [`Runs the server by using a different absolute location of the configuration file`, `verdaccio --config /home/user/verdaccio/config.yaml`]]
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwibW9kdWxlIiwicGtnVmVyc2lvbiIsImV4cG9ydHMiLCJ2ZXJzaW9uIiwicGtnTmFtZSIsIm5hbWUiLCJERUZBVUxUX1BST0NFU1NfTkFNRSIsImxvZ2dlciIsIkluaXRDb21tYW5kIiwiQ29tbWFuZCIsIk9wdGlvbiIsIlN0cmluZyIsImRlc2NyaXB0aW9uIiwiZXhlY3V0ZSIsImNvbmZpZ1BhdGhMb2NhdGlvbiIsImZpbmRDb25maWdGaWxlIiwiY29uZmlnIiwidmVyZGFjY2lvQ29uZmlndXJhdGlvbiIsInBhcnNlQ29uZmlnRmlsZSIsInNlbGZfcGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiaHR0cHMiLCJlbmFibGUiLCJ3YXJuIiwiZmlsZSIsInByb2Nlc3MiLCJ0aXRsZSIsIndlYiIsInN0YXJ0VmVyZGFjY2lvIiwibGlzdGVuIiwibGlzdGVuRGVmYXVsdENhbGxiYWNrIiwiZXJyIiwiZmF0YWwiLCJleGl0IiwiRGVmYXVsdCIsIlVzYWdlIiwiZGV0YWlscyIsImV4YW1wbGVzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jbGkvY29tbWFuZHMvaW5pdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kLCBPcHRpb24gfSBmcm9tICdjbGlwYW5pb24nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGxpc3RlbkRlZmF1bHRDYWxsYmFjaywgc3RhcnRWZXJkYWNjaW8gfSBmcm9tICcuLi8uLi9ib290c3RyYXAnO1xuaW1wb3J0IGZpbmRDb25maWdGaWxlIGZyb20gJy4uLy4uL2NvbmZpZy1wYXRoJztcbmltcG9ydCB7IHBhcnNlQ29uZmlnRmlsZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxucmVxdWlyZSgncGtnaW5mbycpKG1vZHVsZSk7XG5jb25zdCBwa2dWZXJzaW9uID0gbW9kdWxlLmV4cG9ydHMudmVyc2lvbjtcbmNvbnN0IHBrZ05hbWUgPSBtb2R1bGUuZXhwb3J0cy5uYW1lO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9QUk9DRVNTX05BTUU6IHN0cmluZyA9ICd2ZXJkYWNjaW8nO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vLi4vbG9nZ2VyJyk7XG5cbmV4cG9ydCBjbGFzcyBJbml0Q29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuICBzdGF0aWMgcGF0aHMgPSBbQ29tbWFuZC5EZWZhdWx0XTtcblxuICBsaXN0ZW4gPSBPcHRpb24uU3RyaW5nKCctbCwtLWxpc3RlbicsIHtcbiAgICBkZXNjcmlwdGlvbjogJ2hvc3Q6cG9ydCBudW1iZXIgdG8gbGlzdGVuIG9uIChkZWZhdWx0OiBsb2NhbGhvc3Q6NDg3MyknLFxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc3RhdGljIHVzYWdlID0gQ29tbWFuZC5Vc2FnZSh7XG4gICAgZGVzY3JpcHRpb246IGBsYXVuY2ggdGhlIHNlcnZlcmAsXG4gICAgZGV0YWlsczogYFxuICAgICAgVGhpcyBzdGFydCB0aGUgcmVnaXN0cnkgaW4gdGhlIGRlZmF1bHQgcG9ydC5cblxuICAgICAgV2hlbiB1c2VkIHdpdGhvdXQgYXJndW1lbnRzLCBpdDpcblxuICAgICAgLSBib290c3RyYXAgdGhlIHNlcnZlciBhdCB0aGUgcG9ydCAgXFxgNDg3M1xcYFxuXG4gICAgICBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGFyZTpcblxuICAgICAgLSBcXGAtLWxpc3RlblxcYCB0byBzd2l0Y2ggdGhlIGRlZmF1bHQgc2VydmVyIHBvcnQsXG4gICAgICAtIFxcYC0tY29uZmlnXFxgIHRvIGRlZmluZSBhIGRpZmZlcmVudCBjb25maWd1cmF0aW9uIHBhdGggbG9jYXRpb24sXG5cbiAgICBgLFxuICAgIGV4YW1wbGVzOiBbXG4gICAgICBbYFJ1bnMgdGhlIHNlcnZlciB3aXRoIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb25gLCBgdmVyZGFjY2lvYF0sXG4gICAgICBbYFJ1bnMgdGhlIHNlcnZlciBpbiB0aGUgcG9ydCA1MDAwYCwgYHZlcmRhY2NpbyAtLWxpc3RlbiA1MDAwYF0sXG4gICAgICBbXG4gICAgICAgIGBSdW5zIHRoZSBzZXJ2ZXIgYnkgdXNpbmcgYSBkaWZmZXJlbnQgYWJzb2x1dGUgbG9jYXRpb24gb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZWAsXG4gICAgICAgIGB2ZXJkYWNjaW8gLS1jb25maWcgL2hvbWUvdXNlci92ZXJkYWNjaW8vY29uZmlnLnlhbWxgLFxuICAgICAgXSxcbiAgICBdLFxuICB9KTtcblxuICBjb25maWcgPSBPcHRpb24uU3RyaW5nKCctYywtLWNvbmZpZycsIHtcbiAgICBkZXNjcmlwdGlvbjogJ3VzZSB0aGlzIGNvbmZpZ3VyYXRpb24gZmlsZSAoZGVmYXVsdDogLi9jb25maWcueWFtbCknLFxuICB9KTtcblxuICBhc3luYyBleGVjdXRlKCkge1xuICAgIGxldCBjb25maWdQYXRoTG9jYXRpb247XG4gICAgdHJ5IHtcbiAgICAgIGNvbmZpZ1BhdGhMb2NhdGlvbiA9IGZpbmRDb25maWdGaWxlKHRoaXMuY29uZmlnIGFzIHN0cmluZyk7XG4gICAgICBjb25zdCB2ZXJkYWNjaW9Db25maWd1cmF0aW9uID0gcGFyc2VDb25maWdGaWxlKGNvbmZpZ1BhdGhMb2NhdGlvbik7XG4gICAgICBpZiAoIXZlcmRhY2Npb0NvbmZpZ3VyYXRpb24uc2VsZl9wYXRoKSB7XG4gICAgICAgIHZlcmRhY2Npb0NvbmZpZ3VyYXRpb24uc2VsZl9wYXRoID0gcGF0aC5yZXNvbHZlKGNvbmZpZ1BhdGhMb2NhdGlvbik7XG4gICAgICB9XG4gICAgICBpZiAoIXZlcmRhY2Npb0NvbmZpZ3VyYXRpb24uaHR0cHMpIHtcbiAgICAgICAgdmVyZGFjY2lvQ29uZmlndXJhdGlvbi5odHRwcyA9IHsgZW5hYmxlOiBmYWxzZSB9O1xuICAgICAgfVxuXG4gICAgICBsb2dnZXIubG9nZ2VyLndhcm4oeyBmaWxlOiBjb25maWdQYXRoTG9jYXRpb24gfSwgJ2NvbmZpZyBmaWxlICAtIEB7ZmlsZX0nKTtcbiAgICAgIHByb2Nlc3MudGl0bGUgPVxuICAgICAgICAodmVyZGFjY2lvQ29uZmlndXJhdGlvbi53ZWIgJiYgdmVyZGFjY2lvQ29uZmlndXJhdGlvbi53ZWIudGl0bGUpIHx8ICd2ZXJkYWNjaW8nO1xuXG4gICAgICBzdGFydFZlcmRhY2NpbyhcbiAgICAgICAgdmVyZGFjY2lvQ29uZmlndXJhdGlvbixcbiAgICAgICAgdGhpcy5saXN0ZW4gYXMgc3RyaW5nLFxuICAgICAgICBjb25maWdQYXRoTG9jYXRpb24sXG4gICAgICAgIHBrZ1ZlcnNpb24sXG4gICAgICAgIHBrZ05hbWUsXG4gICAgICAgIGxpc3RlbkRlZmF1bHRDYWxsYmFja1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5sb2dnZXIuZmF0YWwoXG4gICAgICAgIHsgZmlsZTogY29uZmlnUGF0aExvY2F0aW9uLCBlcnI6IGVyciB9LFxuICAgICAgICAnY2Fubm90IG9wZW4gY29uZmlnIGZpbGUgQHtmaWxlfTogQHshZXJyLm1lc3NhZ2V9J1xuICAgICAgKTtcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUE4QztBQUFBO0FBQUE7QUFBQTtBQUU5Q0EsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDQyxNQUFNLENBQUM7QUFDMUIsTUFBTUMsVUFBVSxHQUFHRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0MsT0FBTztBQUN6QyxNQUFNQyxPQUFPLEdBQUdKLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDRyxJQUFJO0FBRTVCLE1BQU1DLG9CQUE0QixHQUFHLFdBQVc7QUFBQztBQUN4RCxNQUFNQyxNQUFNLEdBQUdSLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFFL0IsTUFBTVMsV0FBVyxTQUFTQyxrQkFBTyxDQUFDO0VBQUE7SUFBQTtJQUFBLGdDQUc5QkMsaUJBQU0sQ0FBQ0MsTUFBTSxDQUFDLGFBQWEsRUFBRTtNQUNwQ0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBQUEsZ0NBNEJPRixpQkFBTSxDQUFDQyxNQUFNLENBQUMsYUFBYSxFQUFFO01BQ3BDQyxXQUFXLEVBQUU7SUFDZixDQUFDLENBQUM7RUFBQTtFQUVGLE1BQU1DLE9BQU8sR0FBRztJQUNkLElBQUlDLGtCQUFrQjtJQUN0QixJQUFJO01BQ0ZBLGtCQUFrQixHQUFHLElBQUFDLG1CQUFjLEVBQUMsSUFBSSxDQUFDQyxNQUFNLENBQVc7TUFDMUQsTUFBTUMsc0JBQXNCLEdBQUcsSUFBQUMsc0JBQWUsRUFBQ0osa0JBQWtCLENBQUM7TUFDbEUsSUFBSSxDQUFDRyxzQkFBc0IsQ0FBQ0UsU0FBUyxFQUFFO1FBQ3JDRixzQkFBc0IsQ0FBQ0UsU0FBUyxHQUFHQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ1Asa0JBQWtCLENBQUM7TUFDckU7TUFDQSxJQUFJLENBQUNHLHNCQUFzQixDQUFDSyxLQUFLLEVBQUU7UUFDakNMLHNCQUFzQixDQUFDSyxLQUFLLEdBQUc7VUFBRUMsTUFBTSxFQUFFO1FBQU0sQ0FBQztNQUNsRDtNQUVBaEIsTUFBTSxDQUFDQSxNQUFNLENBQUNpQixJQUFJLENBQUM7UUFBRUMsSUFBSSxFQUFFWDtNQUFtQixDQUFDLEVBQUUsd0JBQXdCLENBQUM7TUFDMUVZLE9BQU8sQ0FBQ0MsS0FBSyxHQUNWVixzQkFBc0IsQ0FBQ1csR0FBRyxJQUFJWCxzQkFBc0IsQ0FBQ1csR0FBRyxDQUFDRCxLQUFLLElBQUssV0FBVztNQUVqRixJQUFBRSx5QkFBYyxFQUNaWixzQkFBc0IsRUFDdEIsSUFBSSxDQUFDYSxNQUFNLEVBQ1hoQixrQkFBa0IsRUFDbEJiLFVBQVUsRUFDVkcsT0FBTyxFQUNQMkIsZ0NBQXFCLENBQ3RCO0lBQ0gsQ0FBQyxDQUFDLE9BQU9DLEdBQUcsRUFBRTtNQUNaekIsTUFBTSxDQUFDQSxNQUFNLENBQUMwQixLQUFLLENBQ2pCO1FBQUVSLElBQUksRUFBRVgsa0JBQWtCO1FBQUVrQixHQUFHLEVBQUVBO01BQUksQ0FBQyxFQUN0QyxrREFBa0QsQ0FDbkQ7TUFDRE4sT0FBTyxDQUFDUSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pCO0VBQ0Y7QUFDRjtBQUFDO0FBQUEsZ0JBckVZMUIsV0FBVyxXQUNQLENBQUNDLGtCQUFPLENBQUMwQixPQUFPLENBQUM7QUFBQSxnQkFEckIzQixXQUFXLFdBUVBDLGtCQUFPLENBQUMyQixLQUFLLENBQUM7RUFDM0J4QixXQUFXLEVBQUcsbUJBQWtCO0VBQ2hDeUIsT0FBTyxFQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7RUFDREMsUUFBUSxFQUFFLENBQ1IsQ0FBRSxnREFBK0MsRUFBRyxXQUFVLENBQUMsRUFDL0QsQ0FBRSxrQ0FBaUMsRUFBRyx5QkFBd0IsQ0FBQyxFQUMvRCxDQUNHLGtGQUFpRixFQUNqRixxREFBb0QsQ0FDdEQ7QUFFTCxDQUFDLENBQUMifQ==