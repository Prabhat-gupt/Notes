{"version":3,"sources":["../../src/main.js"],"names":["allNodeVersions","semver","getOpts","normalizeNodeVersion","versionRange","opts","allNodeVersionsOpts","versions","version","maxSatisfying","Error"],"mappings":"AAAA,MAAOA,CAAAA,eAAP,KAA4B,mBAA5B;AACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB;;AAEA,OAASC,OAAT,KAAwB,cAAxB;;;AAGA,cAAe,eAAeC,CAAAA,oBAAf,CAAoCC,YAApC,CAAkDC,IAAlD,CAAwD;AACrE,KAAM,CAAEC,mBAAF,EAA0BJ,OAAO,CAACG,IAAD,CAAvC;AACA,KAAM,CAAEE,QAAF,EAAe,KAAMP,CAAAA,eAAe,CAACM,mBAAD,CAA1C;;AAEA,KAAME,CAAAA,OAAO,CAAGP,MAAM,CAACQ,aAAP,CAAqBF,QAArB,CAA+BH,YAA/B,CAAhB;;AAEA,GAAII,OAAO,GAAK,IAAhB,CAAsB;AACpB,KAAM,IAAIE,CAAAA,KAAJ,CAAW,yBAAwBN,YAAa,EAAhD,CAAN;AACD;;AAED,MAAOI,CAAAA,OAAP;AACD","sourcesContent":["import allNodeVersions from 'all-node-versions'\nimport semver from 'semver'\n\nimport { getOpts } from './options.js'\n\n// Retrieve the Node version matching a specific `versionRange`\nexport default async function normalizeNodeVersion(versionRange, opts) {\n  const { allNodeVersionsOpts } = getOpts(opts)\n  const { versions } = await allNodeVersions(allNodeVersionsOpts)\n\n  const version = semver.maxSatisfying(versions, versionRange)\n\n  if (version === null) {\n    throw new Error(`Invalid Node version: ${versionRange}`)\n  }\n\n  return version\n}\n"],"file":"src/main.js"}