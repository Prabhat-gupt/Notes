{"version":3,"file":"utils.js","names":["DEFAULT_BCRYPT_ROUNDS","HtpasswdHashAlgorithm","lockAndRead","name","cb","readFile","lock","err","res","parseHTPasswd","input","split","reduce","result","line","args","map","str","trim","length","verifyPassword","passwd","hash","match","bcrypt","compare","indexOf","slice","crypto","createHash","update","digest","md5","crypt3","generateHtpasswdLine","user","hashConfig","algorithm","rounds","crypt","sha1","createError","comment","Date","toJSON","addUserToHTPasswd","body","encodeURIComponent","status","newline","sanityCheck","password","verifyFn","users","maxUsers","Error","auth","Object","keys","changePasswordToHTPasswd","newPasswd","lines","userLineIndex","findIndex","shift","username","passwordValid","updatedUserLine","splice","join"],"sources":["../src/utils.ts"],"sourcesContent":["import crypto from 'crypto';\n\nimport md5 from 'apache-md5';\nimport bcrypt from 'bcryptjs';\nimport createError, { HttpError } from 'http-errors';\nimport { readFile } from '@verdaccio/file-locking';\nimport { Callback } from '@verdaccio/types';\n\nimport crypt3 from './crypt3';\n\nexport const DEFAULT_BCRYPT_ROUNDS = 10;\n\nexport enum HtpasswdHashAlgorithm {\n  md5 = 'md5',\n  sha1 = 'sha1',\n  crypt = 'crypt',\n  bcrypt = 'bcrypt',\n}\n\nexport interface HtpasswdHashConfig {\n  algorithm: HtpasswdHashAlgorithm;\n  rounds?: number;\n}\n\n// this function neither unlocks file nor closes it\n// it'll have to be done manually later\nexport function lockAndRead(name: string, cb: Callback): void {\n  readFile(name, { lock: true }, (err, res) => {\n    if (err) {\n      return cb(err);\n    }\n\n    return cb(null, res);\n  });\n}\n\n/**\n * parseHTPasswd - convert htpasswd lines to object.\n * @param {string} input\n * @returns {object}\n */\nexport function parseHTPasswd(input: string): Record<string, any> {\n  // The input is split on line ending styles that are both windows and unix compatible\n  return input.split(/[\\r]?[\\n]/).reduce((result, line) => {\n    const args = line.split(':', 3).map((str) => str.trim());\n    if (args.length > 1) {\n      result[args[0]] = args[1];\n    }\n    return result;\n  }, {});\n}\n\n/**\n * verifyPassword - matches password and it's hash.\n * @param {string} passwd\n * @param {string} hash\n * @returns {Promise<boolean>}\n */\nexport async function verifyPassword(passwd: string, hash: string): Promise<boolean> {\n  if (hash.match(/^\\$2([aby])\\$/)) {\n    return await bcrypt.compare(passwd, hash);\n  } else if (hash.indexOf('{PLAIN}') === 0) {\n    return passwd === hash.slice(7);\n  } else if (hash.indexOf('{SHA}') === 0) {\n    return (\n      crypto\n        .createHash('sha1')\n        // https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding\n        .update(passwd, 'utf8')\n        .digest('base64') === hash.slice(5)\n    );\n  }\n  // for backwards compatibility, first check md5 then check crypt3\n  return md5(passwd, hash) === hash || crypt3(passwd, hash) === hash;\n}\n\n/**\n * generateHtpasswdLine - generates line for htpasswd file.\n * @param {string} user\n * @param {string} passwd\n * @param {HtpasswdHashConfig} hashConfig\n * @returns {Promise<string>}\n */\nexport async function generateHtpasswdLine(\n  user: string,\n  passwd: string,\n  hashConfig: HtpasswdHashConfig\n): Promise<string> {\n  let hash: string;\n\n  switch (hashConfig.algorithm) {\n    case HtpasswdHashAlgorithm.bcrypt:\n      hash = await bcrypt.hash(passwd, hashConfig.rounds || DEFAULT_BCRYPT_ROUNDS);\n      break;\n    case HtpasswdHashAlgorithm.crypt:\n      hash = crypt3(passwd);\n      break;\n    case HtpasswdHashAlgorithm.md5:\n      hash = md5(passwd);\n      break;\n    case HtpasswdHashAlgorithm.sha1:\n      hash = '{SHA}' + crypto.createHash('sha1').update(passwd, 'utf8').digest('base64');\n      break;\n    default:\n      throw createError('Unexpected hash algorithm');\n  }\n\n  const comment = 'autocreated ' + new Date().toJSON();\n  return `${user}:${hash}:${comment}\\n`;\n}\n\n/**\n * addUserToHTPasswd - Generate a htpasswd format for .htpasswd\n * @param {string} body\n * @param {string} user\n * @param {string} passwd\n * @returns {Promise<string>}\n */\nexport async function addUserToHTPasswd(\n  body: string,\n  user: string,\n  passwd: string,\n  hashConfig: HtpasswdHashConfig\n): Promise<string> {\n  if (user !== encodeURIComponent(user)) {\n    const err = createError('username should not contain non-uri-safe characters');\n\n    err.status = 409;\n    throw err;\n  }\n\n  let newline = await generateHtpasswdLine(user, passwd, hashConfig);\n\n  if (body.length && body[body.length - 1] !== '\\n') {\n    newline = '\\n' + newline;\n  }\n  return body + newline;\n}\n\n/**\n * Sanity check for a user\n * @param {string} user\n * @param {object} users\n * @param {string} password\n * @param {Callback} verifyFn\n * @param {number} maxUsers\n * @returns {object}\n */\nexport async function sanityCheck(\n  user: string,\n  password: string,\n  verifyFn: Callback,\n  users: {},\n  maxUsers: number\n): Promise<HttpError | null> {\n  let err;\n\n  // check for user or password\n  if (!user || !password) {\n    err = Error('username and password is required');\n    err.status = 400;\n    return err;\n  }\n\n  const hash = users[user];\n\n  if (maxUsers < 0) {\n    err = Error('user registration disabled');\n    err.status = 409;\n    return err;\n  }\n\n  if (hash) {\n    const auth = await verifyFn(password, users[user]);\n    if (auth) {\n      err = Error('username is already registered');\n      err.status = 409;\n      return err;\n    }\n    err = Error('unauthorized access');\n    err.status = 401;\n    return err;\n  } else if (Object.keys(users).length >= maxUsers) {\n    err = Error('maximum amount of users reached');\n    err.status = 403;\n    return err;\n  }\n\n  return null;\n}\n\n/**\n * changePasswordToHTPasswd - change password for existing user\n * @param {string} body\n * @param {string} user\n * @param {string} passwd\n * @param {string} newPasswd\n * @param {HtpasswdHashConfig} hashConfig\n * @returns {Promise<string>}\n */\nexport async function changePasswordToHTPasswd(\n  body: string,\n  user: string,\n  passwd: string,\n  newPasswd: string,\n  hashConfig: HtpasswdHashConfig\n): Promise<string> {\n  let lines = body.split('\\n');\n  const userLineIndex = lines.findIndex((line) => line.split(':', 1).shift() === user);\n  if (userLineIndex === -1) {\n    throw new Error(`Unable to change password for user '${user}': user does not currently exist`);\n  }\n  const [username, hash] = lines[userLineIndex].split(':', 2);\n  const passwordValid = await verifyPassword(passwd, hash);\n  if (!passwordValid) {\n    throw new Error(`Unable to change password for user '${user}': invalid old password`);\n  }\n  const updatedUserLine = await generateHtpasswdLine(username, newPasswd, hashConfig);\n  lines.splice(userLineIndex, 1, updatedUserLine);\n  return lines.join('\\n');\n}\n"],"mappings":"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"}