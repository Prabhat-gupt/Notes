import { Config } from './config.js';
import { FeatureFlags } from './feature_flags.js';
import { RuntimeType } from './runtimes/runtime.js';
export { zipFunction, zipFunctions } from './zip.js';
export { NodeBundlerType } from './runtimes/node/bundlers/types.js';
export { RuntimeType } from './runtimes/runtime.js';
export { ModuleFormat } from './runtimes/node/utils/module_format.js';
export interface ListedFunction {
    name: string;
    mainFile: string;
    runtime: RuntimeType;
    extension: string;
    schedule?: string;
    displayName?: string;
}
type ListedFunctionFile = ListedFunction & {
    srcFile: string;
};
interface ListFunctionsOptions {
    basePath?: string;
    config?: Config;
    configFileDirectories?: string[];
    featureFlags?: FeatureFlags;
    parseISC?: boolean;
}
export declare const listFunctions: (relativeSrcFolders: string | string[], { featureFlags: inputFeatureFlags, config, configFileDirectories, parseISC, }?: {
    featureFlags?: FeatureFlags | undefined;
    config?: Config | undefined;
    configFileDirectories?: string[] | undefined;
    parseISC?: boolean | undefined;
}) => Promise<ListedFunction[]>;
export declare const listFunction: (path: string, { featureFlags: inputFeatureFlags, config, configFileDirectories, parseISC, }?: {
    featureFlags?: FeatureFlags | undefined;
    config?: Config | undefined;
    configFileDirectories?: string[] | undefined;
    parseISC?: boolean | undefined;
}) => Promise<ListedFunction | undefined>;
export declare const listFunctionsFiles: (relativeSrcFolders: string | string[], { basePath, config, configFileDirectories, featureFlags: inputFeatureFlags, parseISC, }?: ListFunctionsOptions) => Promise<ListedFunctionFile[]>;
