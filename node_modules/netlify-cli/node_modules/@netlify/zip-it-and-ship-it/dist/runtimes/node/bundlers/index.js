import { extname } from 'path';
import { detectEsModule } from '../utils/detect_es_module.js';
import esbuildBundler from './esbuild/index.js';
import nftBundler from './nft/index.js';
import noBundler from './none/index.js';
import zisiBundler from './zisi/index.js';
export const getBundler = (name) => {
    switch (name) {
        case "esbuild" /* NodeBundlerType.ESBUILD */:
        case "esbuild_zisi" /* NodeBundlerType.ESBUILD_ZISI */:
            return esbuildBundler;
        case "nft" /* NodeBundlerType.NFT */:
            return nftBundler;
        case "zisi" /* NodeBundlerType.ZISI */:
            return zisiBundler;
        case "none" /* NodeBundlerType.NONE */:
            return noBundler;
        default:
            throw new Error(`Unsupported Node bundler: ${name}`);
    }
};
export const getBundlerName = async ({ config: { nodeBundler }, extension, featureFlags, mainFile, }) => {
    if (nodeBundler) {
        return nodeBundler;
    }
    return await getDefaultBundler({ extension, featureFlags, mainFile });
};
const ESBUILD_EXTENSIONS = new Set(['.mjs', '.ts', '.tsx', '.cts', '.mts']);
// We use ZISI as the default bundler, except for certain extensions, for which
// esbuild is the only option.
const getDefaultBundler = async ({ extension, featureFlags, mainFile, }) => {
    if (extension === ".mjs" /* ModuleFileExtension.MJS */ && featureFlags.zisi_pure_esm_mjs) {
        return "nft" /* NodeBundlerType.NFT */;
    }
    if (ESBUILD_EXTENSIONS.has(extension)) {
        return "esbuild" /* NodeBundlerType.ESBUILD */;
    }
    if (featureFlags.traceWithNft) {
        return "nft" /* NodeBundlerType.NFT */;
    }
    const functionIsESM = extname(mainFile) !== ".cjs" /* ModuleFileExtension.CJS */ && (await detectEsModule({ mainFile }));
    return functionIsESM ? "nft" /* NodeBundlerType.NFT */ : "zisi" /* NodeBundlerType.ZISI */;
};
//# sourceMappingURL=index.js.map