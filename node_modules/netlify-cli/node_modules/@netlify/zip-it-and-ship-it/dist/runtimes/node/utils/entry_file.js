import { basename, extname, resolve } from 'path';
import { getFileExtensionForFormat } from './module_format.js';
import { normalizeFilePath } from './normalize_path.js';
const getEntryFileContents = (mainPath, moduleFormat) => {
    const importPath = `.${mainPath.startsWith('/') ? mainPath : `/${mainPath}`}`;
    if (moduleFormat === "cjs" /* ModuleFormat.COMMONJS */) {
        return `module.exports = require('${importPath}')`;
    }
    return `export { handler } from '${importPath}'`;
};
// They are in the order that AWS Lambda will try to find the entry point
const POSSIBLE_LAMBDA_ENTRY_EXTENSIONS = [".js" /* ModuleFileExtension.JS */, ".mjs" /* ModuleFileExtension.MJS */, ".cjs" /* ModuleFileExtension.CJS */];
// checks if the file is considered a entry-file in AWS Lambda
export const isNamedLikeEntryFile = (file, { basePath, filename, }) => POSSIBLE_LAMBDA_ENTRY_EXTENSIONS.some((extension) => {
    const entryFilename = getEntryFileName({ extension, filename });
    const entryFilePath = resolve(basePath, entryFilename);
    return entryFilePath === file;
});
// Check if any src file (except the mainFile) is considered an entry file for AWS Lambda
export const conflictsWithEntryFile = (srcFiles, { basePath, mainFile, filename, }) => srcFiles.some((srcFile) => isNamedLikeEntryFile(srcFile, { basePath, filename }) && srcFile !== mainFile);
// Returns the name for the AWS Lambda entry file
// We do set the handler in AWS Lambda to `<func-name>.handler` and because of
// this it considers `<func-name>.(c|m)?js` as possible entry-points
const getEntryFileName = ({ extension, filename }) => `${basename(filename, extname(filename))}${extension}`;
export const getEntryFile = ({ commonPrefix, featureFlags, filename, mainFile, moduleFormat, userNamespace, }) => {
    const mainPath = normalizeFilePath({ commonPrefix, path: mainFile, userNamespace });
    const extension = getFileExtensionForFormat(moduleFormat, featureFlags);
    const entryFilename = getEntryFileName({ extension, filename });
    const contents = getEntryFileContents(mainPath, moduleFormat);
    return {
        contents,
        filename: entryFilename,
    };
};
//# sourceMappingURL=entry_file.js.map