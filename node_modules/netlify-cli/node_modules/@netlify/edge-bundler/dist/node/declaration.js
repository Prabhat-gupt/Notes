export const getDeclarationsFromConfig = (tomlDeclarations, functionsConfig, deployConfig) => {
    var _a;
    const declarations = [];
    const functionsVisited = new Set();
    // We start by iterating over all the declarations in the TOML file and in
    // the deploy configuration file. For any declaration for which we also have
    // a function configuration object, we replace the path because that object
    // takes precedence.
    for (const declaration of [...tomlDeclarations, ...deployConfig.declarations]) {
        const config = functionsConfig[declaration.function];
        // If no config is found, add the declaration as is
        if (!config) {
            declarations.push(declaration);
            // If we have a path specified as either a string or non-empty array
            // create a declaration for each path
        }
        else if ((_a = config.path) === null || _a === void 0 ? void 0 : _a.length) {
            const paths = Array.isArray(config.path) ? config.path : [config.path];
            paths.forEach((path) => {
                declarations.push({ ...declaration, cache: config.cache, path });
            });
            // With an in-source config without a path, add the config to the declaration
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { path, excludedPath, ...rest } = config;
            declarations.push({ ...declaration, ...rest });
        }
        functionsVisited.add(declaration.function);
    }
    // Finally, we must create declarations for functions that are not declared
    // in the TOML at all.
    for (const name in functionsConfig) {
        const { cache, path } = functionsConfig[name];
        // If we have path specified create a declaration for each path
        if (!functionsVisited.has(name) && path) {
            const paths = Array.isArray(path) ? path : [path];
            paths.forEach((singlePath) => {
                declarations.push({ cache, function: name, path: singlePath });
            });
        }
    }
    return declarations;
};
