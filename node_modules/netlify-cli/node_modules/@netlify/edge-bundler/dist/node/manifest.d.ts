import type { Bundle } from './bundle.js';
import { FunctionConfig } from './config.js';
import type { Declaration } from './declaration.js';
import { EdgeFunction } from './edge_function.js';
import { Layer } from './layer.js';
interface Route {
    function: string;
    name?: string;
    pattern: string;
}
interface EdgeFunctionConfig {
    excluded_patterns: string[];
}
interface Manifest {
    bundler_version: string;
    bundles: {
        asset: string;
        format: string;
    }[];
    import_map?: string;
    layers: {
        name: string;
        flag: string;
    }[];
    routes: Route[];
    post_cache_routes: Route[];
    function_config: Record<string, EdgeFunctionConfig>;
}
interface GenerateManifestOptions {
    bundles?: Bundle[];
    declarations?: Declaration[];
    functions: EdgeFunction[];
    functionConfig?: Record<string, FunctionConfig>;
    importMap?: string;
    layers?: Layer[];
}
interface Route {
    function: string;
    name?: string;
    pattern: string;
}
declare const generateManifest: ({ bundles, declarations, functions, functionConfig, importMap, layers, }: GenerateManifestOptions) => Manifest;
interface WriteManifestOptions extends GenerateManifestOptions {
    distDirectory: string;
}
declare const writeManifest: ({ distDirectory, ...rest }: WriteManifestOptions) => Promise<Manifest>;
export { generateManifest, Manifest, writeManifest };
