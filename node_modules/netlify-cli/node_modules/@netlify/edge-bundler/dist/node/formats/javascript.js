import { promises as fs } from 'fs';
import { join } from 'path';
import { env } from 'process';
import { pathToFileURL } from 'url';
import { deleteAsync } from 'del';
const BOOTSTRAP_LATEST = 'https://63c7dea30898f20009dd4da8--edge.netlify.com/bootstrap/index-combined.ts';
const defaultFormatExportTypeError = (name) => `The Edge Function "${name}" has failed to load. Does it have a function as the default export?`;
const defaultFormatImpoortError = (name) => `There was an error with Edge Function "${name}".`;
const generateStage2 = async ({ distDirectory, fileName, formatExportTypeError, formatImportError, functions, }) => {
    await deleteAsync(distDirectory, { force: true });
    await fs.mkdir(distDirectory, { recursive: true });
    const entryPoint = getLocalEntryPoint(functions, { formatExportTypeError, formatImportError });
    const stage2Path = join(distDirectory, fileName);
    await fs.writeFile(stage2Path, entryPoint);
    return stage2Path;
};
const getBootstrapURL = () => { var _a; return (_a = env.NETLIFY_EDGE_BOOTSTRAP) !== null && _a !== void 0 ? _a : BOOTSTRAP_LATEST; };
// For the local development environment, we import the user functions with
// dynamic imports to gracefully handle the case where the file doesn't have
// a valid default export.
const getLocalEntryPoint = (functions, { formatExportTypeError = defaultFormatExportTypeError, formatImportError = defaultFormatImpoortError, }) => {
    const bootImport = `import { boot } from "${getBootstrapURL()}";`;
    const declaration = `const functions = {}; const metadata = { functions: {} };`;
    const imports = functions.map((func) => {
        const url = pathToFileURL(func.path);
        const metadata = {
            url,
        };
        return `
      try {
        const { default: func } = await import("${url}");

        if (typeof func === "function") {
          functions["${func.name}"] = func;
          metadata.functions["${func.name}"] = ${JSON.stringify(metadata)}
        } else {
          console.log(${JSON.stringify(formatExportTypeError(func.name))});
        }
      } catch (error) {
        console.log(${JSON.stringify(formatImportError(func.name))});
        console.error(error);
      }
      `;
    });
    const bootCall = `boot(functions, metadata);`;
    return [bootImport, declaration, ...imports, bootCall].join('\n\n');
};
export { generateStage2, getBootstrapURL, getLocalEntryPoint };
