{"version":3,"sources":["../../src/progress.js"],"names":["finished","promisify","MultiBar","colorsOption","figures","pFinished","green","addProgress","response","progress","path","showsBar","bar","startBar","on","percent","update","writable","stopBar","MULTIBAR_OPTS","format","nodejs","barCompleteChar","barIncompleteChar","stopOnComplete","clearOnComplete","hideCursor","multibar","create","prefix","getPrefix","start","terminal","isTTY","version","VERSION_TEXT_REGEXP","exec","VERSION_TEXT","padEnd","VERSION_PADDING","INDEX_TEXT_REGEXP","test","INDEX_TEXT","DEFAULT_TEXT","stop","remove","bars","length"],"mappings":"AAAA,OAASA,QAAT,KAAyB,QAAzB;AACA,OAASC,SAAT,KAA0B,MAA1B;;AAEA,OAASC,QAAT,KAAyB,cAAzB;AACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB;AACA,MAAOC,CAAAA,OAAP,KAAoB,SAApB;;;AAGA,KAAMC,CAAAA,SAAS,CAAGJ,SAAS,CAACD,QAAD,CAA3B;;AAEA,KAAM,CAAEM,KAAF,EAAYH,YAAY,EAA9B;;;;AAIA,MAAO,MAAMI,CAAAA,WAAW,CAAG,eAAgBC,QAAhB,CAA0BC,QAA1B,CAAoCC,IAApC,CAA0C;AACnE,GAAI,CAACD,QAAD,EAAa,CAACE,QAAQ,EAA1B,CAA8B;AAC5B;AACD;;AAED,KAAMC,CAAAA,GAAG,CAAGC,QAAQ,CAACH,IAAD,CAApB;;AAEAF,QAAQ,CAACM,EAAT,CAAY,kBAAZ,CAAgC,CAAC,CAAEC,OAAF,CAAD,GAAiB;AAC/CH,GAAG,CAACI,MAAJ,CAAWD,OAAX;AACD,CAFD;;AAIA,GAAI;AACF,KAAMV,CAAAA,SAAS,CAACG,QAAD,CAAW,CAAES,QAAQ,CAAE,KAAZ,CAAX,CAAf;AACD,CAAC,KAAM,CAAE;;AAEVC,OAAO,CAACN,GAAD,CAAP;AACD,CAhBM;;AAkBP,KAAMO,CAAAA,aAAa,CAAG;AACpBC,MAAM,CAAG,KAAId,KAAK,CAACF,OAAO,CAACiB,MAAT,CAAiB,mBADf;AAEpBC,eAAe,CAAE,QAFG;AAGpBC,iBAAiB,CAAE,QAHC;AAIpBC,cAAc,CAAE,IAJI;AAKpBC,eAAe,CAAE,IALG;AAMpBC,UAAU,CAAE,IANQ,CAAtB;;;;;;;AAaA,KAAMC,CAAAA,QAAQ,CAAG,GAAIzB,CAAAA,QAAJ,CAAaiB,aAAb,CAAjB;;;AAGA,KAAMN,CAAAA,QAAQ,CAAG,SAAUH,IAAV,CAAgB;AAC/B,KAAME,CAAAA,GAAG,CAAGe,QAAQ,CAACC,MAAT,EAAZ;AACA,KAAMC,CAAAA,MAAM,CAAGC,SAAS,CAACpB,IAAD,CAAxB;AACAE,GAAG,CAACmB,KAAJ,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAEF,MAAF,CAAhB;AACA,MAAOjB,CAAAA,GAAP;AACD,CALD;;;AAQA,KAAMD,CAAAA,QAAQ,CAAG,UAAY;AAC3B,MAAOgB,CAAAA,QAAQ,CAACK,QAAT,CAAkBC,KAAlB,EAAP;AACD,CAFD;;;AAKA,KAAMH,CAAAA,SAAS,CAAG,SAAUpB,IAAV,CAAgB;AAChC,KAAMwB,CAAAA,OAAO,CAAGC,mBAAmB,CAACC,IAApB,CAAyB1B,IAAzB,CAAhB;;AAEA,GAAIwB,OAAO,GAAK,IAAhB,CAAsB;AACpB,MAAQ,GAAEG,YAAa,IAAGH,OAAO,CAAC,CAAD,CAAP,CAAWI,MAAX,CAAkBC,eAAlB,CAAmC,EAA7D;AACD;;AAED,GAAIC,iBAAiB,CAACC,IAAlB,CAAuB/B,IAAvB,CAAJ,CAAkC;AAChC,MAAOgC,CAAAA,UAAP;AACD;;AAED,MAAOC,CAAAA,YAAP;AACD,CAZD;;AAcA,KAAMR,CAAAA,mBAAmB,CAAG,kBAA5B;AACA,KAAMK,CAAAA,iBAAiB,CAAG,wBAA1B;AACA,KAAMD,CAAAA,eAAe,CAAG,CAAxB;;AAEA,KAAMF,CAAAA,YAAY,CAAG,SAArB;AACA,KAAMK,CAAAA,UAAU,CAAG,0BAAnB;AACA,KAAMC,CAAAA,YAAY,CAAG,SAArB;;;AAGA,KAAMzB,CAAAA,OAAO,CAAG,SAAUN,GAAV,CAAe;AAC7BA,GAAG,CAACgC,IAAJ;AACAjB,QAAQ,CAACkB,MAAT,CAAgBjC,GAAhB;;;AAGA,GAAIe,QAAQ,CAACmB,IAAT,CAAcC,MAAd,GAAyB,CAA7B,CAAgC;AAC9BpB,QAAQ,CAACiB,IAAT;AACD;AACF,CARD","sourcesContent":["import { finished } from 'stream'\nimport { promisify } from 'util'\n\nimport { MultiBar } from 'cli-progress'\nimport colorsOption from 'colors-option'\nimport figures from 'figures'\n\n// TODO: use `stream/promises` instead once dropping support for Node <15.0.0\nconst pFinished = promisify(finished)\n\nconst { green } = colorsOption()\n\n// Add CLI progress bar.\n// If there are several downloads in parallel, several bars are shown.\nexport const addProgress = async function (response, progress, path) {\n  if (!progress || !showsBar()) {\n    return\n  }\n\n  const bar = startBar(path)\n\n  response.on('downloadProgress', ({ percent }) => {\n    bar.update(percent)\n  })\n\n  try {\n    await pFinished(response, { writable: false })\n  } catch {}\n\n  stopBar(bar)\n}\n\nconst MULTIBAR_OPTS = {\n  format: `  ${green(figures.nodejs)}  {prefix}  {bar}`,\n  barCompleteChar: '\\u2588',\n  barIncompleteChar: '\\u2591',\n  stopOnComplete: true,\n  clearOnComplete: true,\n  hideCursor: true,\n}\n\n// MultiBar is just a low-memory plain object that does not interact with the\n// CLI when no bar has been started yet, or when all bars are complete, so it's\n// safe as a global variable. We need it as a global variable so concurrent\n// calls use the same MultiBar.\nconst multibar = new MultiBar(MULTIBAR_OPTS)\n\n// Ad a new progress bar when a download starts\nconst startBar = function (path) {\n  const bar = multibar.create()\n  const prefix = getPrefix(path)\n  bar.start(1, 0, { prefix })\n  return bar\n}\n\n// `cli-progress` does nothing when not inside a TTY\nconst showsBar = function () {\n  return multibar.terminal.isTTY()\n}\n\n// Retrieve the text shown before the progress bar\nconst getPrefix = function (path) {\n  const version = VERSION_TEXT_REGEXP.exec(path)\n\n  if (version !== null) {\n    return `${VERSION_TEXT} ${version[1].padEnd(VERSION_PADDING)}`\n  }\n\n  if (INDEX_TEXT_REGEXP.test(path)) {\n    return INDEX_TEXT\n  }\n\n  return DEFAULT_TEXT\n}\n\nconst VERSION_TEXT_REGEXP = /^\\/?v([\\d.]+)\\//u\nconst INDEX_TEXT_REGEXP = /^\\/?index.(json|tab)$/u\nconst VERSION_PADDING = 7\n\nconst VERSION_TEXT = 'Node.js'\nconst INDEX_TEXT = 'List of Node.js versions'\nconst DEFAULT_TEXT = 'Node.js'\n\n// Remove a new progress bar when a download is complete\nconst stopBar = function (bar) {\n  bar.stop()\n  multibar.remove(bar)\n\n  // Otherwise the progress bar is creating an empty line\n  if (multibar.bars.length === 0) {\n    multibar.stop()\n  }\n}\n"],"file":"src/progress.js"}