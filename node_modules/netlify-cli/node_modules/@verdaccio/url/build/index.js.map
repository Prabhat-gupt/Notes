{"version":3,"file":"index.js","names":["debug","buildDebug","validProtocols","isURLhasValidProtocol","uri","test","isHost","url","options","isURLValidator","require_host","allow_trailing_dot","require_valid_protocol","require_port","require_tld","getWebProtocol","headerProtocol","protocol","returnProtocol","defaultProtocol","commaIndex","indexOf","slice","includes","wrapPrefix","prefix","startsWith","endsWith","combineBaseUrl","host","newPrefix","groupedURI","URL","result","href","validateURL","publicUrl","parsed","replace","Error","err","getPublicUrl","url_prefix","requestOptions","process","env","VERDACCIO_PUBLIC_URL","envURL","headers","protoHeader","VERDACCIO_FORWARDED_PROTO","toLocaleLowerCase","HEADERS","FORWARDED_PROTO","toLowerCase","combinedUrl"],"sources":["../src/index.ts"],"sourcesContent":["import buildDebug from 'debug';\nimport { URL } from 'url';\nimport isURLValidator from 'validator/lib/isURL';\n\nimport { HEADERS } from '@verdaccio/core';\n\nconst debug = buildDebug('verdaccio:core:url');\n\nconst validProtocols = ['https', 'http'];\n\n/**\n * Check if URI is starting with \"http://\", \"https://\" or \"//\"\n * @param {string} uri\n */\nexport function isURLhasValidProtocol(uri: string): boolean {\n  return /^(https?:)?\\/\\//.test(uri);\n}\n\nexport function isHost(url: string = '', options = {}): boolean {\n  return isURLValidator(url, {\n    require_host: true,\n    allow_trailing_dot: false,\n    require_valid_protocol: false,\n    // @ts-ignore\n    require_port: false,\n    require_tld: false,\n    ...options,\n  });\n}\n\n/**\n * Detect running protocol (http or https)\n */\nexport function getWebProtocol(headerProtocol: string | void, protocol: string): string {\n  let returnProtocol;\n  const [, defaultProtocol] = validProtocols;\n  // HAProxy variant might return http,http with X-Forwarded-Proto\n  if (typeof headerProtocol === 'string' && headerProtocol !== '') {\n    debug('header protocol: %o', protocol);\n    const commaIndex = headerProtocol.indexOf(',');\n    returnProtocol = commaIndex > 0 ? headerProtocol.slice(0, commaIndex) : headerProtocol;\n  } else {\n    debug('req protocol: %o', headerProtocol);\n    returnProtocol = protocol;\n  }\n\n  return validProtocols.includes(returnProtocol) ? returnProtocol : defaultProtocol;\n}\n\nexport function wrapPrefix(prefix: string | void): string {\n  if (prefix === '' || typeof prefix === 'undefined' || prefix === null) {\n    return '';\n  } else if (!prefix.startsWith('/') && prefix.endsWith('/')) {\n    return `/${prefix}`;\n  } else if (!prefix.startsWith('/') && !prefix.endsWith('/')) {\n    return `/${prefix}/`;\n  } else if (prefix.startsWith('/') && !prefix.endsWith('/')) {\n    return `${prefix}/`;\n  } else {\n    return prefix;\n  }\n}\n\n/**\n * Create base url for registry.\n * @return {String} base registry url\n */\nexport function combineBaseUrl(protocol: string, host: string, prefix: string = ''): string {\n  debug('combined protocol %o', protocol);\n  debug('combined host %o', host);\n  const newPrefix = wrapPrefix(prefix);\n  debug('combined prefix %o', newPrefix);\n  const groupedURI = new URL(wrapPrefix(prefix), `${protocol}://${host}`);\n  const result = groupedURI.href;\n  debug('combined url %o', result);\n  return result;\n}\n\nexport function validateURL(publicUrl: string | void) {\n  try {\n    const parsed = new URL(publicUrl as string);\n    if (!validProtocols.includes(parsed.protocol.replace(':', ''))) {\n      throw Error('invalid protocol');\n    }\n    return true;\n  } catch (err: any) {\n    // TODO: add error logger here\n    return false;\n  }\n}\n\nexport type RequestOptions = {\n  /**\n   * Request host.\n   */\n  host: string;\n  /**\n   * Request protocol.\n   */\n  protocol: string;\n  /**\n   * Request headers.\n   */\n  headers: { [key: string]: string };\n  remoteAddress?: string;\n  /**\n   * Logged username the request, usually after token verification.\n   */\n  username?: string;\n};\n\nexport function getPublicUrl(url_prefix: string = '', requestOptions: RequestOptions): string {\n  if (validateURL(process.env.VERDACCIO_PUBLIC_URL as string)) {\n    const envURL = new URL(wrapPrefix(url_prefix), process.env.VERDACCIO_PUBLIC_URL as string).href;\n    debug('public url by env %o', envURL);\n    return envURL;\n  } else if (requestOptions.headers['host']) {\n    const host = requestOptions.headers['host'];\n    if (!isHost(host)) {\n      throw new Error('invalid host');\n    }\n    const protoHeader =\n      process.env.VERDACCIO_FORWARDED_PROTO?.toLocaleLowerCase() ??\n      HEADERS.FORWARDED_PROTO.toLowerCase();\n    const protocol = getWebProtocol(requestOptions.headers[protoHeader], requestOptions.protocol);\n    const combinedUrl = combineBaseUrl(protocol, host, url_prefix);\n    debug('public url by request %o', combinedUrl);\n    return combinedUrl;\n  } else {\n    return '/';\n  }\n}\n"],"mappings":"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"}