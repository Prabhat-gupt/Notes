{"version":3,"file":"builder.js","names":["ConfigBuilder","constructor","config","uplinks","packages","security","build","addPackageAccess","pattern","pkgAccess","addUplink","id","uplink","addSecurity","merge","addAuth","auth","addLogger","log","addStorage","storage","store","getConfig","getAsYaml","fromJStoYAML"],"sources":["../src/builder.ts"],"sourcesContent":["import { merge } from 'lodash';\n\nimport {\n  AuthConf,\n  ConfigYaml,\n  LoggerConfItem,\n  PackageAccessYaml,\n  Security,\n  UpLinkConf,\n} from '@verdaccio/types';\n\nimport { fromJStoYAML } from '.';\n\n/**\n * Helper configuration builder constructor, used to build the configuration for testing or\n * programatically creating a configuration.\n */\nexport default class ConfigBuilder {\n  private config: ConfigYaml;\n\n  public constructor(config?: Partial<ConfigYaml>) {\n    // @ts-ignore\n    this.config = config ?? { uplinks: {}, packages: {}, security: {} };\n  }\n\n  public static build(config?: Partial<ConfigYaml>): ConfigBuilder {\n    return new ConfigBuilder(config);\n  }\n\n  public addPackageAccess(pattern: string, pkgAccess: PackageAccessYaml) {\n    // @ts-ignore\n    this.config.packages[pattern] = pkgAccess;\n    return this;\n  }\n\n  public addUplink(id: string, uplink: UpLinkConf) {\n    this.config.uplinks[id] = uplink;\n    return this;\n  }\n\n  public addSecurity(security: Partial<Security>) {\n    this.config.security = merge(this.config.security, security);\n    return this;\n  }\n\n  public addAuth(auth: Partial<AuthConf>) {\n    this.config.auth = merge(this.config.auth, auth);\n    return this;\n  }\n\n  public addLogger(log: LoggerConfItem) {\n    this.config.log = log;\n    return this;\n  }\n\n  public addStorage(storage: string | object) {\n    if (typeof storage === 'string') {\n      this.config.storage = storage;\n    } else {\n      this.config.store = storage;\n    }\n    return this;\n  }\n\n  public getConfig(): ConfigYaml {\n    return this.config;\n  }\n\n  public getAsYaml(): string {\n    return fromJStoYAML(this.config) as string;\n  }\n}\n"],"mappings":";;;;;;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACe,MAAMA,aAAa,CAAC;EAG1BC,WAAW,CAACC,MAA4B,EAAE;IAC/C;IACA,IAAI,CAACA,MAAM,GAAGA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI;MAAEC,OAAO,EAAE,CAAC,CAAC;MAAEC,QAAQ,EAAE,CAAC,CAAC;MAAEC,QAAQ,EAAE,CAAC;IAAE,CAAC;EACrE;EAEA,OAAcC,KAAK,CAACJ,MAA4B,EAAiB;IAC/D,OAAO,IAAIF,aAAa,CAACE,MAAM,CAAC;EAClC;EAEOK,gBAAgB,CAACC,OAAe,EAAEC,SAA4B,EAAE;IACrE;IACA,IAAI,CAACP,MAAM,CAACE,QAAQ,CAACI,OAAO,CAAC,GAAGC,SAAS;IACzC,OAAO,IAAI;EACb;EAEOC,SAAS,CAACC,EAAU,EAAEC,MAAkB,EAAE;IAC/C,IAAI,CAACV,MAAM,CAACC,OAAO,CAACQ,EAAE,CAAC,GAAGC,MAAM;IAChC,OAAO,IAAI;EACb;EAEOC,WAAW,CAACR,QAA2B,EAAE;IAC9C,IAAI,CAACH,MAAM,CAACG,QAAQ,GAAG,IAAAS,aAAK,EAAC,IAAI,CAACZ,MAAM,CAACG,QAAQ,EAAEA,QAAQ,CAAC;IAC5D,OAAO,IAAI;EACb;EAEOU,OAAO,CAACC,IAAuB,EAAE;IACtC,IAAI,CAACd,MAAM,CAACc,IAAI,GAAG,IAAAF,aAAK,EAAC,IAAI,CAACZ,MAAM,CAACc,IAAI,EAAEA,IAAI,CAAC;IAChD,OAAO,IAAI;EACb;EAEOC,SAAS,CAACC,GAAmB,EAAE;IACpC,IAAI,CAAChB,MAAM,CAACgB,GAAG,GAAGA,GAAG;IACrB,OAAO,IAAI;EACb;EAEOC,UAAU,CAACC,OAAwB,EAAE;IAC1C,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI,CAAClB,MAAM,CAACkB,OAAO,GAAGA,OAAO;IAC/B,CAAC,MAAM;MACL,IAAI,CAAClB,MAAM,CAACmB,KAAK,GAAGD,OAAO;IAC7B;IACA,OAAO,IAAI;EACb;EAEOE,SAAS,GAAe;IAC7B,OAAO,IAAI,CAACpB,MAAM;EACpB;EAEOqB,SAAS,GAAW;IACzB,OAAO,IAAAC,cAAY,EAAC,IAAI,CAACtB,MAAM,CAAC;EAClC;AACF;AAAC"}