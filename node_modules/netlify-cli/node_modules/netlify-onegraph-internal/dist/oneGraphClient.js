"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchNetlifySessionSchemaQuery = exports.executeCreateCLISessionEventMutation = exports.fetchListNetlifyEnabledServicesQuery = exports.fetchSharedDocumentQuery = exports.executeCreateSharedDocumentMutation = exports.fetchListSharedDocumentsQuery = exports.executeCreateGraphQLSchemaMutation = exports.executeCreateApiTokenMutation = exports.executeMarkCliSessionInactive = exports.executeMarkCliSessionActiveHeartbeat = exports.fetchGraphQLSchemaForSession = exports.fetchEnabledServicesForApp = exports.ensureAppForSite = exports.createNewAppSchema = exports.upsertAppForSite = exports.fetchAppSchemaQuery = exports.eventAudience = exports.friendlyEventName = exports.executeCreatePersistedQueryMutation = exports.ackCLISessionEvents = exports.updateCLISessionMetadata = exports.createCLISession = exports.fetchCliSessionEvents = exports.fetchCliSession = exports.fetchPersistedQuery = exports.fetchOneGraphSchemaForServices = exports.fetchOneGraphSchemaForServicesJson = exports.fetchOneGraphSchemaById = exports.fetchOneGraphSchemaByIdJson = exports.getGraphJwtForSite = void 0;
var graphql_1 = require("graphql");
var node_fetch_1 = require("node-fetch");
var internalConsole_1 = require("./internalConsole");
var generatedOneGraphClient_1 = require("./generatedOneGraphClient");
var ONEDASH_APP_ID = "0b066ba6-ed39-4db8-a497-ba0be34d5b2a";
var netlifyGraphHost = "graph.netlify.com";
var netlifyApiRoot = "https://api.netlify.com/api";
// Caches the jwt so that we don't fetch a new one every graph call
var graphJwtCache = new Map();
var EARLY_REFRESH_THRESHOLD_MS = 1000 * 60 * 5; // 5 minutes
function shouldRefresh(cacheResult) {
    if ("jwt" in cacheResult && // If we're still fulfilling the promise we're good
        cacheResult.expiration - EARLY_REFRESH_THRESHOLD_MS < performance.now()) {
        return true;
    }
    return false;
}
var __netlifyGraphJwt = function (_a) {
    var siteId = _a.siteId, nfToken = _a.nfToken;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, options, resp;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    url = netlifyApiRoot + "/v1/sites/" + siteId + "/jwt";
                    options = {
                        headers: {
                            "Content-type": "application/json",
                            Authorization: "bearer " + nfToken,
                        },
                    };
                    return [4 /*yield*/, (0, node_fetch_1.default)(url, options)];
                case 1:
                    resp = _b.sent();
                    if (resp.status === 200) {
                        return [2 /*return*/, resp.json()];
                    }
                    else {
                        throw new Error("Non-200 status when exchanging API token for short-lived JWT: " + resp.status);
                    }
                    return [2 /*return*/];
            }
        });
    });
};
var atob = globalThis.Buffer != null
    ? function (x) { return globalThis.Buffer.from(x, "base64").toString(); }
    : globalThis.atob;
function getGraphJwtForSite(_a) {
    var siteId = _a.siteId, nfToken = _a.nfToken;
    var cacheResult = graphJwtCache.get(siteId);
    if (cacheResult && !shouldRefresh(cacheResult)) {
        return Promise.resolve(cacheResult);
    }
    var result = __netlifyGraphJwt({ siteId: siteId, nfToken: nfToken })
        .then(function (_a) {
        var jwt = _a.jwt;
        var base64Payload = jwt
            .split(".")[1]
            // url-safe -> ordinary base64
            .replace(/_/g, "/")
            .replace(/-/g, "+");
        var payload = JSON.parse(atob(base64Payload));
        var expirationTicks = payload.exp - payload.iat;
        // use performance.now in case the browser's clock is way off
        var expiration = performance.now() + expirationTicks * 1000;
        graphJwtCache.set(siteId, { jwt: jwt, expiration: expiration });
        return { jwt: jwt, expiration: expiration };
    })
        .catch(function (e) {
        graphJwtCache.delete(siteId);
        throw e;
    });
    graphJwtCache.set(siteId, result);
    return result;
}
exports.getGraphJwtForSite = getGraphJwtForSite;
/**
 * Fetch a schema (in json form) for an app by its schemaId
 * @param {object} input
 * @param {string} input.appId
 * @param {string} input.schemaId
 * @param {string} input.accessToken
 * @returns {Promise<Record<string, any>>} The schema json
 */
var fetchOneGraphSchemaByIdJson = function (_a) {
    var appId = _a.appId, schemaId = _a.schemaId, accessToken = _a.accessToken;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, authorizationHeader, headers, response, text, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    url = "https://" + netlifyGraphHost + "/schema?app_id=" + appId + "&schema_id=" + schemaId;
                    authorizationHeader = accessToken
                        ? { authorization: "Bearer " + accessToken }
                        : {};
                    headers = __assign({}, authorizationHeader);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, (0, node_fetch_1.default)(url, {
                            method: "GET",
                            headers: headers,
                            body: null,
                        })];
                case 2:
                    response = _b.sent();
                    return [4 /*yield*/, response.text()];
                case 3:
                    text = _b.sent();
                    return [2 /*return*/, JSON.parse(text)];
                case 4:
                    error_1 = _b.sent();
                    internalConsole_1.internalConsole.error("Error fetching schema: " + JSON.stringify(error_1, null, 2));
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.fetchOneGraphSchemaByIdJson = fetchOneGraphSchemaByIdJson;
/**
 * Fetch a schema and parse it for an app by its schemaId
 * @param {object} input
 * @param {string} input.siteId
 * @param {string} input.schemaId
 * @param {string} input.accessToken
 * @returns {Promise<GraphQLSchema>} The schema for the app
 */
var fetchOneGraphSchemaById = function (_a) {
    var siteId = _a.siteId, schemaId = _a.schemaId, accessToken = _a.accessToken;
    return __awaiter(void 0, void 0, void 0, function () {
        var result, schema;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, exports.fetchOneGraphSchemaByIdJson)({
                        accessToken: accessToken,
                        appId: siteId,
                        schemaId: schemaId,
                    })];
                case 1:
                    result = _b.sent();
                    if (!result) {
                        return [2 /*return*/];
                    }
                    schema = (0, graphql_1.buildClientSchema)(result.data);
                    return [2 /*return*/, schema];
            }
        });
    });
};
exports.fetchOneGraphSchemaById = fetchOneGraphSchemaById;
/**
 * Given an appId and desired services, fetch the schema (in json form) for that app
 * @param {string} appId
 * @param {string[]} enabledServices
 * @returns {Promise<Record<string, unknown>>} The schema for the app
 */
var fetchOneGraphSchemaForServicesJson = function (appId, enabledServices) { return __awaiter(void 0, void 0, void 0, function () {
    var url, headers, response, text, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                url = "https://" + netlifyGraphHost + "/schema?app_id=" + appId + "&serviceFields=" + enabledServices.join(",");
                headers = {};
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4 /*yield*/, (0, node_fetch_1.default)(url, {
                        method: "GET",
                        headers: headers,
                        body: null,
                    })];
            case 2:
                response = _a.sent();
                return [4 /*yield*/, response.text()];
            case 3:
                text = _a.sent();
                return [2 /*return*/, JSON.parse(text)];
            case 4:
                error_2 = _a.sent();
                internalConsole_1.internalConsole.error("Error fetching schema: " + JSON.stringify(error_2, null, 2));
                return [2 /*return*/];
            case 5: return [2 /*return*/];
        }
    });
}); };
exports.fetchOneGraphSchemaForServicesJson = fetchOneGraphSchemaForServicesJson;
/**
 * Given an appId and desired services, fetch the schema json for an app and parse it into a GraphQL Schema
 * @param {string} appId
 * @param {string[]} enabledServices
 * @returns {Promise<GraphQLSchema>} The schema for the app
 */
var fetchOneGraphSchemaForServices = function (appId, enabledServices) { return __awaiter(void 0, void 0, void 0, function () {
    var result, schema;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.fetchOneGraphSchemaForServicesJson)(appId, enabledServices)];
            case 1:
                result = _a.sent();
                if (!result) {
                    return [2 /*return*/];
                }
                schema = (0, graphql_1.buildClientSchema)(result.data);
                return [2 /*return*/, schema];
        }
    });
}); };
exports.fetchOneGraphSchemaForServices = fetchOneGraphSchemaForServices;
/**
 * Fetch a persisted doc belonging to appId by its id
 * @param {string} jwt
 * @param {string} appId
 * @param {string} docId
 * @returns {string|undefined} The persisted operations doc
 */
var fetchPersistedQuery = function (jwt, appId, docId) { return __awaiter(void 0, void 0, void 0, function () {
    var response, persistedQuery;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.fetchPersistedQueryQuery({
                    appId: appId,
                    id: docId,
                }, {
                    siteId: ONEDASH_APP_ID,
                    accessToken: jwt,
                })];
            case 1:
                response = _c.sent();
                persistedQuery = (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.persistedQuery;
                return [2 /*return*/, persistedQuery];
        }
    });
}); };
exports.fetchPersistedQuery = fetchPersistedQuery;
/**
 *
 * @param {object} options
 * @param {string} options.appId The app to query against, typically the siteId
 * @param {string} options.jwt The netlify jwt that is used for authentication
 * @param {string} options.sessionId The session id to fetch CLI events for
 * @returns {Promise<{session: CLISessionQuery["data"]["oneGraph"]["netlifyCliSession"] , errors: any[]}>} The unhandled events for the cli session to process
 */
var fetchCliSession = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, jwt, sessionId, desiredEventCount, sessionResult, session;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                appId = options.appId, jwt = options.jwt, sessionId = options.sessionId;
                desiredEventCount = options.desiredEventCount || 1;
                return [4 /*yield*/, generatedOneGraphClient_1.default.fetchCLISessionQuery({
                        sessionId: sessionId,
                        first: desiredEventCount || 1000,
                    }, {
                        siteId: appId,
                        accessToken: jwt,
                    })];
            case 1:
                sessionResult = _c.sent();
                session = ((_b = (_a = sessionResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.netlifyCliSession) || [];
                return [2 /*return*/, { session: session, errors: sessionResult.errors }];
        }
    });
}); };
exports.fetchCliSession = fetchCliSession;
/**
 *
 * @param {object} options
 * @param {string} options.appId The app to query against, typically the siteId
 * @param {string} options.jwt The netlify jwt that is used for authentication
 * @param {string} options.sessionId The session id to fetch CLI events for
 * @returns {Promise<OneGraphCliEvent[]|undefined>} The unhandled events for the cli session to process
 */
var fetchCliSessionEvents = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, jwt, sessionId, desiredEventCount, next, events;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                appId = options.appId, jwt = options.jwt, sessionId = options.sessionId;
                desiredEventCount = 1000;
                return [4 /*yield*/, (0, exports.fetchCliSession)({
                        appId: appId,
                        jwt: jwt,
                        sessionId: sessionId,
                        desiredEventCount: desiredEventCount,
                    })];
            case 1:
                next = _b.sent();
                events = ((_a = next.session) === null || _a === void 0 ? void 0 : _a.events) || [];
                return [2 /*return*/, { errors: next.errors, events: events }];
        }
    });
}); };
exports.fetchCliSessionEvents = fetchCliSessionEvents;
/**
 * Register a new CLI session with OneGraph
 * @param {string} jwt The netlify jwt to use for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} name The name of the CLI session, will be visible in the UI and CLI ouputs
 * @param {object} metadata Any additional metadata to attach to the session
 * @returns {Promise<object|undefined>} The CLI session object
 */
var createCLISession = function (jwt, appId, name, metadata) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                payload = {
                    appId: appId,
                    name: name,
                    metadata: metadata,
                };
                return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreateCLISessionMutation(payload, {
                        siteId: appId,
                        accessToken: jwt,
                    })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.createNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, session];
        }
    });
}); };
exports.createCLISession = createCLISession;
/**
 * Update the CLI session with new metadata (e.g. the latest docId) by its id
 * @param {string} jwt The netlify jwt to use for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to update
 * @param {object} metadata The new metadata to set on the session
 * @returns {Promise<object|undefined>} The updated session object
 */
var updateCLISessionMetadata = function (jwt, appId, sessionId, metadata) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeUpdateCLISessionMetadataMutation({
                    sessionId: sessionId,
                    metadata: metadata,
                }, {
                    siteId: appId,
                    accessToken: jwt,
                })];
            case 1:
                result = _d.sent();
                if (result.errors) {
                    internalConsole_1.internalConsole.warn("Unable to updateCLISessionMetadata: " + JSON.stringify(result.errors, null, 2));
                }
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.updateNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, session];
        }
    });
}); };
exports.updateCLISessionMetadata = updateCLISessionMetadata;
/**
 * Acknoledge CLI events that have been processed and delete them from the upstream queue
 * @param {object} input
 * @param {string} input.appId The app to query against, typically the siteId
 * @param {string} input.jwt The netlify jwt that is used for authentication, if any
 * @param {string} input.sessionId The session id the events belong to
 * @param {string[]} input.eventIds The event ids to ack (and delete) from the session queue, having been processed
 * @returns
 */
var ackCLISessionEvents = function (input) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, jwt, eventIds, sessionId, result, events;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                appId = input.appId, jwt = input.jwt, eventIds = input.eventIds, sessionId = input.sessionId;
                return [4 /*yield*/, generatedOneGraphClient_1.default.executeAckCLISessionEventMutation({
                        sessionId: sessionId,
                        eventIds: eventIds,
                    }, {
                        accessToken: jwt,
                        siteId: appId,
                    })];
            case 1:
                result = _c.sent();
                events = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.ackNetlifyCliEvents;
                return [2 /*return*/, events];
        }
    });
}); };
exports.ackCLISessionEvents = ackCLISessionEvents;
exports.executeCreatePersistedQueryMutation = generatedOneGraphClient_1.default.executeCreatePersistedQueryMutation;
/**
 *
 * @param {OneGraphCliEvent} event
 * @returns {string} a human-friendly description of the event
 */
var friendlyEventName = function (event) {
    var __typename = event.__typename, payload = event.payload;
    switch (__typename) {
        case "OneGraphNetlifyCliSessionTestEvent":
            return (0, exports.friendlyEventName)(payload);
        case "OneGraphNetlifyCliSessionGenerateHandlerEvent":
            return "Generate handler as Netlify function ";
        case "OneGraphNetlifyCliSessionPersistedLibraryUpdatedEvent":
            return "Sync Netlify Graph operations library";
        case "OneGraphNetlifyCliSessionOpenFileEvent":
            return "Open file " + payload.filePath;
        default: {
            if (__typename.startsWith("OneGraphNetlify")) {
                return __typename.replace("OneGraphNetlify", "");
            }
            return "Unrecognized event (" + __typename + ")";
        }
    }
};
exports.friendlyEventName = friendlyEventName;
/**
 *
 * @param {OneGraphCliEvent} event
 * @returns {OneGraphCliEventAudience} Which audience the event is intended for
 */
var eventAudience = function (event) {
    var __typename = event.__typename, payload = event.payload;
    if (event.audience || payload.audience) {
        return event.audience || payload.audience;
    }
    switch (__typename) {
        case "OneGraphNetlifyCliSessionTestEvent":
            return (0, exports.eventAudience)(payload);
        case "OneGraphNetlifyCliSessionFileWrittenEvent":
            return "UI";
        default: {
            return "CLI";
        }
    }
};
exports.eventAudience = eventAudience;
/**
 * Fetch the schema metadata for a site (enabled services, id, etc.)
 */
exports.fetchAppSchemaQuery = generatedOneGraphClient_1.default.fetchAppSchemaQuery;
/**
 * If a site does not exists upstream in OneGraph for the given site, create it
 * @param {string} jwt The netlify jwt that is used for authentication, if any
 * @param {string} siteId The site id to create an app for upstream on OneGraph
 * @returns
 */
var upsertAppForSite = function (jwt, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeUpsertAppForSiteMutation({
                    siteId: siteId,
                }, {
                    siteId: ONEDASH_APP_ID,
                    accessToken: jwt,
                })];
            case 1:
                result = _d.sent();
                return [2 /*return*/, (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.upsertAppForNetlifySite) === null || _c === void 0 ? void 0 : _c.app];
        }
    });
}); };
exports.upsertAppForSite = upsertAppForSite;
/**
 * Create a new schema in OneGraph for the given site with the specified metadata (enabled services, etc.)
 * @param {string} jwt The netlify jwt that is used for authentication, if any
 * @param {object} input The details of the schema to create
 * @returns {Promise<object>} The schema metadata for the site
 */
var createNewAppSchema = function (jwt, input) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreateNewSchemaMutation({
                    input: input,
                }, {
                    siteId: input.appId,
                    accessToken: jwt,
                })];
            case 1:
                result = _d.sent();
                return [2 /*return*/, (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.createGraphQLSchema) === null || _c === void 0 ? void 0 : _c.graphqlSchema];
        }
    });
}); };
exports.createNewAppSchema = createNewAppSchema;
/**
 * Ensure that an app exists upstream in OneGraph for the given site
 * @param {string} jwt The netlify jwt that is used for authentication, if any
 * @param {string} siteId The site id to create an app for upstream on OneGraph
 * @returns
 */
var ensureAppForSite = function (jwt, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var upsertResult, appId, schema;
    var _a, _b, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeUpsertAppForSiteMutation({
                    siteId: siteId,
                }, {
                    siteId: ONEDASH_APP_ID,
                    accessToken: jwt,
                })];
            case 1:
                upsertResult = _e.sent();
                appId = (_d = (_c = (_b = (_a = upsertResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.upsertAppForNetlifySite) === null || _c === void 0 ? void 0 : _c.app) === null || _d === void 0 ? void 0 : _d.id;
                return [4 /*yield*/, generatedOneGraphClient_1.default.fetchAppSchemaQuery({
                        appId: appId,
                    }, {
                        siteId: appId,
                        accessToken: jwt,
                    })];
            case 2:
                schema = _e.sent();
                if (!!schema) return [3 /*break*/, 4];
                internalConsole_1.internalConsole.log("Creating new empty default GraphQL schema for site....");
                return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreateNewSchemaMutation({
                        input: {
                            appId: siteId,
                            enabledServices: ["ONEGRAPH"],
                            setAsDefaultForApp: true,
                        },
                    }, {
                        siteId: appId,
                        accessToken: jwt,
                    })];
            case 3:
                _e.sent();
                _e.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.ensureAppForSite = ensureAppForSite;
/**
 * Fetch a list of what services are enabled for the given site
 * @param {string} jwt The netlify jwt that is used for authentication
 * @param {string} appId The app id to query against
 * @returns
 */
var fetchEnabledServicesForApp = function (jwt, appId) { return __awaiter(void 0, void 0, void 0, function () {
    var appSchemaResult;
    var _a, _b, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.fetchAppSchemaQuery({
                    appId: appId,
                }, {
                    siteId: appId,
                    accessToken: jwt,
                })];
            case 1:
                appSchemaResult = _e.sent();
                return [2 /*return*/, (_d = (_c = (_b = (_a = appSchemaResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.app) === null || _c === void 0 ? void 0 : _c.graphQLSchema) === null || _d === void 0 ? void 0 : _d.services];
        }
    });
}); };
exports.fetchEnabledServicesForApp = fetchEnabledServicesForApp;
/**
 * Fetch a list of what services are enabled for the given session
 * @param {string} jwt The netlify jwt that is used for authentication
 * @param {string} sessionId The session ID to query against
 */
var fetchGraphQLSchemaForSession = function (jwt, siteId, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var appSchemaResult;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.fetchFetchNetlifySessionSchemaQuery({
                    sessionId: sessionId,
                }, {
                    siteId: siteId,
                    accessToken: jwt,
                })];
            case 1:
                appSchemaResult = _c.sent();
                return [2 /*return*/, (_b = (_a = appSchemaResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.netlifyCliSession.graphQLSchema];
        }
    });
}); };
exports.fetchGraphQLSchemaForSession = fetchGraphQLSchemaForSession;
/**
 * Mark a CLI session as active and update the session's heartbeat
 * @param {string} jwt The netlify jwt that is used for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to mark as active / update heartbeat
 * @returns {Promise<{ errors?: GraphQLError[]; data: MiniSession }>}
 */
var executeMarkCliSessionActiveHeartbeat = function (jwt, appId, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeMarkCLISessionActiveHeartbeat({
                    id: sessionId,
                }, {
                    siteId: appId,
                    accessToken: jwt,
                })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.updateNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, { errors: result.errors, data: session }];
        }
    });
}); };
exports.executeMarkCliSessionActiveHeartbeat = executeMarkCliSessionActiveHeartbeat;
/**
 * Mark a CLI session as inactive
 * @param {string} jwt The netlify jwt that is used for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to mark as inactive
 * @returns {Promise<{ errors?: GraphQLError[]; data: MiniSession }>}
 */
var executeMarkCliSessionInactive = function (jwt, appId, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeMarkCLISessionInactive({
                    id: sessionId,
                }, {
                    siteId: appId,
                    accessToken: jwt,
                })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.updateNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, { errors: result.errors, data: session }];
        }
    });
}); };
exports.executeMarkCliSessionInactive = executeMarkCliSessionInactive;
exports.executeCreateApiTokenMutation = generatedOneGraphClient_1.default.executeCreateApiTokenMutation;
exports.executeCreateGraphQLSchemaMutation = generatedOneGraphClient_1.default.executeCreateGraphQLSchemaMutation;
/**
 * List shared documents given a set of filters
 */
exports.fetchListSharedDocumentsQuery = generatedOneGraphClient_1.default.fetchListSharedDocumentsQuery;
/**
 * Create a document with a shared operation for others to import and use
 */
exports.executeCreateSharedDocumentMutation = generatedOneGraphClient_1.default.executeCreateSharedDocumentMutation;
/**
 * Find a shared document given its id
 */
exports.fetchSharedDocumentQuery = generatedOneGraphClient_1.default.fetchSharedDocumentQuery;
/**
 * Find a shared document given its id
 */
exports.fetchListNetlifyEnabledServicesQuery = generatedOneGraphClient_1.default.fetchListNetlifyEnabledServicesQuery;
/**
 * Create a new event for a CLI session to consume
 */
exports.executeCreateCLISessionEventMutation = generatedOneGraphClient_1.default.executeCreateCLISessionEventMutation;
/**
 * Fetch schema metadata for cli session
 */
exports.fetchNetlifySessionSchemaQuery = generatedOneGraphClient_1.default.fetchFetchNetlifySessionSchemaQuery;
//# sourceMappingURL=oneGraphClient.js.map