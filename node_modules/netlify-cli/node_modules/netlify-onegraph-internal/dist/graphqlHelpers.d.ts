import type { GraphQLSchema, FragmentDefinitionNode, OperationDefinitionNode, GraphQLType, DocumentNode } from "graphql";
import { Maybe } from "graphql/jsutils/Maybe";
import { OperationData } from "./codegen/codegenHelpers";
declare type GraphQLPackage = typeof import("graphql");
export default function capitalizeFirstLetter(string: string): string;
declare type OutEnum = {
    kind: "enum";
    description?: Maybe<string>;
    values: string[];
};
declare type OutSelection = Record<string, OutSelectionFieldValue>;
declare type OutSelectionFieldValue = {
    kind: "selection_field";
    name: string;
    isNullable: boolean;
    type: OutType;
    description?: Maybe<string>;
};
declare type OutInlineFragment = {
    kind: "inlineFragment";
    typeCondition: string;
    selections: OutSelection;
};
declare type OutObject = {
    kind: "object";
    description?: Maybe<string>;
    namedFragments: {
        name: string;
        typeCondition: string;
    }[];
    inlineFragments: OutInlineFragment[];
    selections: OutSelection;
};
declare type OutArray = {
    kind: "array";
    description?: Maybe<string>;
    type: OutType;
};
declare type OutScalar = {
    kind: "scalar";
    description?: Maybe<string>;
    type: string;
};
declare type OutUnion = {
    kind: "union";
    typename: string;
    typenameFields: string[];
    description?: Maybe<string>;
    objects: (OutObject & {
        __typename: string;
    })[];
    namedFragments: {
        name: string;
        typeCondition: string;
    }[];
};
declare type OutInterface = {
    kind: "interface";
    description?: Maybe<string>;
    namedFragments: {
        name: string;
        typeCondition: string;
    }[];
    inlineFragments: OutInlineFragment[];
    selections: OutSelection;
};
declare type OutType = OutEnum | OutObject | OutArray | OutScalar | OutUnion | OutInterface;
export declare function gatherAllReferencedTypes(GraphQL: GraphQLPackage, schema: GraphQLSchema, query: OperationDefinitionNode): Array<string>;
export declare function gatherVariableDefinitions(GraphQL: GraphQLPackage, definition: OperationDefinitionNode): Array<[string, string]>;
export declare function typeScriptForGraphQLType(GraphQL: GraphQLPackage, schema: GraphQLSchema, gqlType: GraphQLType): string;
export declare const guessVariableDescriptions: (GraphQL: GraphQLPackage, schema: GraphQLSchema, operationDefinition: OperationDefinitionNode, variableNames: string[]) => Record<string, {
    usageCount: number;
    descriptions?: Set<string>;
}>;
export declare function typeScriptSignatureForOperationVariables(GraphQL: GraphQLPackage, variableNames: Array<string>, schema: GraphQLSchema, operationDefinition: OperationDefinitionNode): string;
export declare function listCount(GraphQL: GraphQLPackage, gqlType: any): number;
export declare function typeScriptDefinitionObjectForOperation(GraphQL: GraphQLPackage, schema: GraphQLSchema, operationDefinition: OperationDefinitionNode | FragmentDefinitionNode, fragmentDefinitions: Record<string, FragmentDefinitionNode>): OutObject;
export declare function typeScriptSignatureForOperation(GraphQL: GraphQLPackage, schema: GraphQLSchema, operationDefinition: OperationDefinitionNode, fragmentDefinitions: Record<string, FragmentDefinitionNode>): string;
export declare function typeScriptDefinitionObjectForFragment(GraphQL: GraphQLPackage, schema: GraphQLSchema, fragmentDefinition: FragmentDefinitionNode, fragmentDefinitions: Record<string, FragmentDefinitionNode>): OutObject | OutScalar | OutUnion | OutInterface;
export declare function typeScriptSignatureForFragment(GraphQL: GraphQLPackage, schema: GraphQLSchema, fragmentDefinition: FragmentDefinitionNode, fragmentDefinitions: Record<string, FragmentDefinitionNode>): string;
export declare function typeScriptTypeNameForOperation(name: string): string;
/**
 * Doesn't patch e.g. fragments
 */
export declare function patchSubscriptionWebhookField({ GraphQL, schema, definition, }: {
    GraphQL: GraphQLPackage;
    schema: GraphQLSchema;
    definition: OperationDefinitionNode;
}): OperationDefinitionNode;
export declare function patchSubscriptionWebhookSecretField({ GraphQL, schema, definition, }: {
    GraphQL: GraphQLPackage;
    schema: GraphQLSchema;
    definition: OperationDefinitionNode;
}): OperationDefinitionNode;
export declare const formInput: (GraphQL: GraphQLPackage, schema: any, def: any) => string | null;
export declare const remixFormInput: (GraphQL: GraphQLPackage, schema: any, def: any, path?: never[]) => string | null;
export declare const formElComponent: ({ GraphQL, operationData, schema, callFn, }: {
    GraphQL: GraphQLPackage;
    operationData: OperationData;
    schema: GraphQLSchema;
    callFn: string;
}) => {
    formHelpers: string;
    formEl: string;
};
export declare const normalizeOperationsDoc: (GraphQL: GraphQLPackage, operationsDoc: string) => string;
export declare const gatherHardcodedValues: (GraphQL: GraphQLPackage, query: string) => [string, string | number][];
export declare const extractPersistableOperation: (GraphQL: GraphQLPackage, doc: DocumentNode, operationDefinition: OperationDefinitionNode) => {
    fragmentDependencies: FragmentDefinitionNode[];
    persistableOperationString: string;
} | null;
export {};
