"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var graphql_1 = require("graphql");
var GraphQL = require("graphql");
var path = require("path/posix");
var index_1 = require("./index");
var internalConsole_1 = require("./internalConsole");
var test = function () { return __awaiter(void 0, void 0, void 0, function () {
    var sourceGraphQLFilename, schemaGraphQLFilename, sourceGraphQLFile, schemaGraphQLFile, schema, parsedDoc, functions, netlifyGraphConfig, result, exportedFiles;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                (0, internalConsole_1.registerConsole)(console);
                sourceGraphQLFilename = "./tests/assets/netlifyGraphOperationsLibrary.graphql";
                schemaGraphQLFilename = "./tests/assets/netlifyGraphSchema.graphql";
                sourceGraphQLFile = (0, fs_1.readFileSync)(sourceGraphQLFilename, "utf8");
                schemaGraphQLFile = (0, fs_1.readFileSync)(schemaGraphQLFilename, "utf8");
                schema = (0, graphql_1.buildASTSchema)((0, graphql_1.parse)(schemaGraphQLFile));
                parsedDoc = (0, graphql_1.parse)(sourceGraphQLFile);
                functions = index_1.NetlifyGraph.extractFunctionsFromOperationDoc(GraphQL, parsedDoc);
                console.log("functions:", functions);
                netlifyGraphConfig = {
                    netlifyGraphPath: ["..", "..", "lib", "netlifyGraph"],
                    graphQLConfigJsonFilename: [".graphqlrc.json"],
                    framework: "custom",
                    webhookBasePath: "/api",
                    functionsPath: [],
                    graphQLOperationsSourceDirectory: ["..", "..", "lib", "netlifyGraph"],
                    graphQLSchemaFilename: [
                        "..",
                        "..",
                        "lib",
                        "netlifyGraph",
                        "netlifyGraphSchema.graphql",
                    ],
                    netlifyGraphImplementationFilename: ["..", "..", "lib", "index.js"],
                    netlifyGraphTypeDefinitionsFilename: ["..", "..", "lib", "index.d.ts"],
                    netlifyGraphRequirePath: ["..", "..", "lib", "netlifyGraph"],
                    extension: "ts",
                    moduleType: "esm",
                    language: "typescript",
                    runtimeTargetEnv: "node",
                };
                return [4 /*yield*/, index_1.NetlifyGraph.generateHandlerSource({
                        GraphQL: GraphQL,
                        handlerOptions: {
                            postHttpMethod: true,
                            useClientAuth: true,
                        },
                        netlifyGraphConfig: netlifyGraphConfig,
                        operationId: "5c7bb879-a810-4a7e-8aec-55d05fd9c172",
                        operationsDoc: sourceGraphQLFile,
                        schema: schema,
                    })];
            case 1:
                result = _a.sent();
                if (!result) {
                    throw new Error("result is undefined");
                }
                exportedFiles = result.exportedFiles;
                exportedFiles === null || exportedFiles === void 0 ? void 0 : exportedFiles.forEach(function (exportedFile) {
                    var filename = exportedFile.kind === "NamedExportedFile"
                        ? path.join.apply(path, exportedFile.name) : "default";
                    var contentPath = "/tmp/" + filename + ".ts";
                    console.log(contentPath + ":\n", exportedFile.content);
                    (0, fs_1.writeFileSync)(contentPath, exportedFile.content);
                });
                return [2 /*return*/];
        }
    });
}); };
test();
//# sourceMappingURL=sanity.test.js.map