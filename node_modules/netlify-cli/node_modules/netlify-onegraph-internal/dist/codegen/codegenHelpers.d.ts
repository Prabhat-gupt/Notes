import * as GraphQL from "graphql";
import type { FragmentDefinitionNode, GraphQLSchema, OperationDefinitionNode } from "graphql";
import { NetlifyGraphConfig, ParsedFragment, ParsedFunction } from "../netlifyGraph";
export declare const munge: (name: any) => any;
export declare type NamedExportedFile = {
    kind: "NamedExportedFile";
    name: string[];
    content: string;
    language: string;
    codeMirrorMode?: string;
};
export declare type UnnamedExportedFile = {
    kind: "UnnamedExportedFile";
    content: string;
    language: string;
    codeMirrorMode?: string;
};
export declare type ExportedFile = NamedExportedFile | UnnamedExportedFile;
export declare type ExporterResult = {
    exportedFiles: ExportedFile[];
};
export declare type GenerateHandlerFunction = (opts: {
    GraphQL: typeof GraphQL;
    operationDataList: OperationData[];
    netlifyGraphConfig: NetlifyGraphConfig;
    options: Record<string, boolean>;
    schema: GraphQLSchema;
}) => Promise<ExporterResult>;
export declare type GenerateHandlerPreviewFunction = (opts: {
    GraphQL: typeof GraphQL;
    operationDataList: OperationData[];
    netlifyGraphConfig: NetlifyGraphConfig;
    options: Record<string, boolean>;
    schema: GraphQLSchema;
}) => ExportedFile;
export declare type SnippetOption = {
    id: string;
    label: string;
    initial: boolean;
};
export declare type OperationDataList = {
    operationDefinitions: (OperationDefinitionNode | FragmentDefinitionNode)[];
    fragmentDefinitions: FragmentDefinitionNode[];
    operationDataList: OperationData[];
    rawOperationDataList: OperationData[];
};
export declare type OperationData = {
    query: string;
    name: string;
    displayName: string;
    type: string;
    variables: {
        [key: string]: string;
    };
    operationDefinition: OperationDefinitionNode | FragmentDefinitionNode;
    fragmentDependencies: FragmentDefinitionNode[];
    persistableOperationString: string | null;
};
export declare type GenerateRuntimeFunction = (opts: {
    GraphQL: typeof GraphQL;
    operationDataList: OperationData[];
    netlifyGraphConfig: NetlifyGraphConfig;
    options: Record<string, unknown>;
    schema: GraphQLSchema;
    schemaId: string;
    functionDefinitions: ParsedFunction[];
    fragments: ParsedFragment[];
}) => NamedExportedFile[];
declare type CodegenSupportableDefinitionType = "query" | "mutation" | "subscription" | "fragment";
export declare type GenerateHandlerFunctionOptions = {
    schemaSdl: string;
    inputTypename: string;
    defaultValue?: Record<string, unknown>;
};
export declare type GenerateHandlerFunctionOptionsDeserialized = {
    schema: GraphQL.GraphQLSchema;
    inputTypename: string;
    defaultValue?: Record<string, unknown>;
};
export declare type Codegen = {
    generatePreview?: GenerateHandlerPreviewFunction;
    generateHandler: GenerateHandlerFunction;
    generateHandlerOptions?: GenerateHandlerFunctionOptions;
    supportedDefinitionTypes: CodegenSupportableDefinitionType[];
    name: string;
    id: string;
    version: string;
};
export declare type CodegenMeta = {
    id: string;
    name: string;
    options: GenerateHandlerFunctionOptions | null;
    supportedDefinitionTypes: CodegenSupportableDefinitionType[];
};
export declare type CodegenModuleMeta = {
    id: string;
    version: string;
    generators: CodegenMeta[];
};
export declare type CodegenModule = {
    id: string;
    version: string;
    generateRuntime: GenerateRuntimeFunction;
    generators: Codegen[];
};
export declare type IncludedCodegenModule = CodegenModule & {
    sigil: string;
};
export {};
