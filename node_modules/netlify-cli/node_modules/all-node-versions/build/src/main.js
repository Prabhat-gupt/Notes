import{env}from"process";

import{handleOfflineError}from"./cache/offline.js";
import{readCachedVersions,writeCachedVersions}from"./cache/read.js";
import{fetchIndex}from"./fetch.js";
import{normalizeIndex}from"./normalize.js";
import{getOpts}from"./options.js";



export default async function allNodeVersions(opts){
const{fetch,...fetchNodeOpts}=getOpts(opts);
const versionsInfo=await getAllVersions(fetch,fetchNodeOpts);
return versionsInfo;
}


const getAllVersions=async function(fetch,fetchNodeOpts){
if(
processCachedVersions!==undefined&&
fetch!==true&&
!env.TEST_CACHE_FILENAME)
{
return processCachedVersions;
}

const versionsInfo=await getVersionsInfo(fetch,fetchNodeOpts);


processCachedVersions=versionsInfo;

return versionsInfo;
};


let processCachedVersions;


const getVersionsInfo=async function(fetch,fetchNodeOpts){
const cachedVersions=await readCachedVersions(fetch);

if(cachedVersions!==undefined){
return cachedVersions;
}

try{
const index=await fetchIndex(fetchNodeOpts);
const versionsInfo=normalizeIndex(index);
await writeCachedVersions(versionsInfo);
return versionsInfo;
}catch(error){
return handleOfflineError(error);
}
};
//# sourceMappingURL=main.js.map