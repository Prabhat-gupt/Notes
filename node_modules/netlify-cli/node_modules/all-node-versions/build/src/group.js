
export const groupBy=function(array,group){
const mapper=getMapper(group);
return groupByFunc(array,mapper);
};

const getMapper=function(group){
if(typeof group==="function"){
return group;
}

if(typeof group==="string"){
return getByProp.bind(undefined,group);
}

if(Array.isArray(group)){
return getByProps.bind(undefined,group);
}

throw new Error(`Group must be a function, property or array of properties`);
};


const getByProps=function(propNames,object){

let keys="";


for(const propName of propNames){
const key=getByProp(propName,object);


keys=keys===""?key:`${keys}.${key}`;
}

return keys;
};


const getByProp=function(propName,object){
if(object===null||typeof object!=="object"){
return"";
}

return String(object[propName]);
};


const groupByFunc=function(array,mapper){
const object={};


for(const item of array){
const key=String(mapper(item));


if(object[key]===undefined){

object[key]=[item];
}else{

object[key].push(item);
}
}

return object;
};
//# sourceMappingURL=group.js.map