{"version":3,"sources":["../../../src/cache/file.js"],"names":["promises","fs","env","globalCacheDir","writeFileAtomic","getCacheFile","cacheDir","CACHE_DIR","cacheFilename","TEST_CACHE_FILENAME","CACHE_FILENAME","getCacheFileContent","cacheFile","cacheFileContent","readFile","lastUpdate","versionsInfo","JSON","parse","age","Date","now","setCacheFileContent","cacheContent","stringify","undefined"],"mappings":"AAAA,OAASA,QAAQ,GAAIC,CAAAA,EAArB,KAA+B,IAA/B;AACA,OAASC,GAAT,KAAoB,SAApB;;AAEA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B;AACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B;;;AAGA,MAAO,MAAMC,CAAAA,YAAY,CAAG,gBAAkB;AAC5C,KAAMC,CAAAA,QAAQ,CAAG,KAAMH,CAAAA,cAAc,CAACI,SAAD,CAArC;AACA,KAAMC,CAAAA,aAAa,CAAGN,GAAG,CAACO,mBAAJ,EAA2BC,cAAjD;AACA,MAAQ,GAAEJ,QAAS,IAAGE,aAAc,EAApC;AACD,CAJM;;AAMP,KAAMD,CAAAA,SAAS,CAAG,KAAlB;AACA,KAAMG,CAAAA,cAAc,CAAG,eAAvB;;;AAGA,MAAO,MAAMC,CAAAA,mBAAmB,CAAG,eAAgBC,SAAhB,CAA2B;AAC5D,KAAMC,CAAAA,gBAAgB,CAAG,KAAMZ,CAAAA,EAAE,CAACa,QAAH,CAAYF,SAAZ,CAAuB,MAAvB,CAA/B;AACA,KAAM,CAAEG,UAAF,CAAc,GAAGC,YAAjB,EAAkCC,IAAI,CAACC,KAAL,CAAWL,gBAAX,CAAxC;AACA,KAAMM,CAAAA,GAAG,CAAGC,IAAI,CAACC,GAAL,GAAaN,UAAzB;AACA,MAAO,CAAEC,YAAF,CAAgBG,GAAhB,CAAP;AACD,CALM;;;AAQP,MAAO,MAAMG,CAAAA,mBAAmB,CAAG,eAAgBV,SAAhB,CAA2BI,YAA3B,CAAyC;AAC1E,KAAMD,CAAAA,UAAU,CAAGK,IAAI,CAACC,GAAL,EAAnB;AACA,KAAME,CAAAA,YAAY,CAAG,CAAER,UAAF,CAAc,GAAGC,YAAjB,CAArB;AACA,KAAMH,CAAAA,gBAAgB,CAAI,GAAEI,IAAI,CAACO,SAAL,CAAeD,YAAf,CAA6BE,SAA7B,CAAwC,CAAxC,CAA2C,IAAvE;;AAEA,GAAI;AACF,KAAMrB,CAAAA,eAAe,CAACQ,SAAD,CAAYC,gBAAZ,CAArB;;;;;AAKD,CAAC,KAAM,CAAE;AACX,CAZM","sourcesContent":["import { promises as fs } from 'fs'\nimport { env } from 'process'\n\nimport globalCacheDir from 'global-cache-dir'\nimport writeFileAtomic from 'write-file-atomic'\n\n// The cache is persisted to `GLOBAL_CACHE_DIR/nve/versions.json`.\nexport const getCacheFile = async function () {\n  const cacheDir = await globalCacheDir(CACHE_DIR)\n  const cacheFilename = env.TEST_CACHE_FILENAME || CACHE_FILENAME\n  return `${cacheDir}/${cacheFilename}`\n}\n\nconst CACHE_DIR = 'nve'\nconst CACHE_FILENAME = 'versions.json'\n\n// Retrieve cache file's content\nexport const getCacheFileContent = async function (cacheFile) {\n  const cacheFileContent = await fs.readFile(cacheFile, 'utf8')\n  const { lastUpdate, ...versionsInfo } = JSON.parse(cacheFileContent)\n  const age = Date.now() - lastUpdate\n  return { versionsInfo, age }\n}\n\n// Persist cache file's content\nexport const setCacheFileContent = async function (cacheFile, versionsInfo) {\n  const lastUpdate = Date.now()\n  const cacheContent = { lastUpdate, ...versionsInfo }\n  const cacheFileContent = `${JSON.stringify(cacheContent, undefined, 2)}\\n`\n\n  try {\n    await writeFileAtomic(cacheFile, cacheFileContent)\n    // If two different functions are calling `normalize-node-version` at the\n    // same time and there's no cache file, they will both try to persist the\n    // file and one might fail, especially on Windows (with EPERM lock file\n    // errors)\n  } catch {}\n}\n"],"file":"src/cache/file.js"}