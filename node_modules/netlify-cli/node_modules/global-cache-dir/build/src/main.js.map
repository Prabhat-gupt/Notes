{"version":3,"sources":["../../src/main.js"],"names":["promises","fs","getCacheDir","pathExists","globalCacheDir","name","cacheDir","createCacheDir","mkdir","recursive"],"mappings":"AAAA,OAASA,QAAQ,GAAIC,CAAAA,EAArB,KAA+B,IAA/B;;AAEA,MAAOC,CAAAA,WAAP,KAAwB,UAAxB;AACA,MAAOC,CAAAA,UAAP,KAAuB,aAAvB;;;AAGA,cAAe,eAAeC,CAAAA,cAAf,CAA8BC,IAA9B,CAAoC;AACjD,KAAMC,CAAAA,QAAQ,CAAGJ,WAAW,CAACG,IAAD,CAA5B;AACA,KAAME,CAAAA,cAAc,CAACD,QAAD,CAApB;AACA,MAAOA,CAAAA,QAAP;AACD;;AAED,KAAMC,CAAAA,cAAc,CAAG,eAAgBD,QAAhB,CAA0B;AAC/C,GAAI,KAAMH,CAAAA,UAAU,CAACG,QAAD,CAApB,CAAgC;AAC9B;AACD;;AAED,KAAML,CAAAA,EAAE,CAACO,KAAH,CAASF,QAAT,CAAmB,CAAEG,SAAS,CAAE,IAAb,CAAnB,CAAN;AACD,CAND","sourcesContent":["import { promises as fs } from 'fs'\n\nimport getCacheDir from 'cachedir'\nimport pathExists from 'path-exists'\n\n// Get the global cache directory\nexport default async function globalCacheDir(name) {\n  const cacheDir = getCacheDir(name)\n  await createCacheDir(cacheDir)\n  return cacheDir\n}\n\nconst createCacheDir = async function (cacheDir) {\n  if (await pathExists(cacheDir)) {\n    return\n  }\n\n  await fs.mkdir(cacheDir, { recursive: true })\n}\n"],"file":"src/main.js"}